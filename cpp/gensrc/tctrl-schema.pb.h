// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tctrl-schema.proto

#ifndef PROTOBUF_tctrl_2dschema_2eproto__INCLUDED
#define PROTOBUF_tctrl_2dschema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class ListValue;
class ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class Struct;
class StructDefaultTypeInternal;
extern StructDefaultTypeInternal _Struct_default_instance_;
class Struct_FieldsEntry;
class Struct_FieldsEntryDefaultTypeInternal;
extern Struct_FieldsEntryDefaultTypeInternal _Struct_FieldsEntry_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace tctrl {
namespace schema {
class AppSpec;
class AppSpecDefaultTypeInternal;
extern AppSpecDefaultTypeInternal _AppSpec_default_instance_;
class ConnectionInfo;
class ConnectionInfoDefaultTypeInternal;
extern ConnectionInfoDefaultTypeInternal _ConnectionInfo_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class ModuleSpec;
class ModuleSpecDefaultTypeInternal;
extern ModuleSpecDefaultTypeInternal _ModuleSpec_default_instance_;
class ModuleTypeSpec;
class ModuleTypeSpecDefaultTypeInternal;
extern ModuleTypeSpecDefaultTypeInternal _ModuleTypeSpec_default_instance_;
class OptionList;
class OptionListDefaultTypeInternal;
extern OptionListDefaultTypeInternal _OptionList_default_instance_;
class ParamOption;
class ParamOptionDefaultTypeInternal;
extern ParamOptionDefaultTypeInternal _ParamOption_default_instance_;
class ParamPartSpec;
class ParamPartSpecDefaultTypeInternal;
extern ParamPartSpecDefaultTypeInternal _ParamPartSpec_default_instance_;
class ParamSpec;
class ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
}  // namespace schema
}  // namespace tctrl

namespace tctrl {
namespace schema {

namespace protobuf_tctrl_2dschema_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tctrl_2dschema_2eproto

enum ParamType {
  OTHER = 0,
  BOOL = 3,
  STRING = 4,
  INT = 5,
  FLOAT = 6,
  IVEC = 7,
  FVEC = 8,
  MENU = 10,
  TRIGGER = 11,
  ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParamType_IsValid(int value);
const ParamType ParamType_MIN = OTHER;
const ParamType ParamType_MAX = TRIGGER;
const int ParamType_ARRAYSIZE = ParamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamType_descriptor();
inline const ::std::string& ParamType_Name(ParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamType_descriptor(), value);
}
inline bool ParamType_Parse(
    const ::std::string& name, ParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamType>(
    ParamType_descriptor(), name, value);
}
// ===================================================================

class ParamOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ParamOption) */ {
 public:
  ParamOption();
  virtual ~ParamOption();

  ParamOption(const ParamOption& from);

  inline ParamOption& operator=(const ParamOption& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamOption& default_instance();

  static inline const ParamOption* internal_default_instance() {
    return reinterpret_cast<const ParamOption*>(
               &_ParamOption_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParamOption* other);

  // implements Message ----------------------------------------------

  inline ParamOption* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamOption* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamOption& from);
  void MergeFrom(const ParamOption& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ParamOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OptionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.OptionList) */ {
 public:
  OptionList();
  virtual ~OptionList();

  OptionList(const OptionList& from);

  inline OptionList& operator=(const OptionList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionList& default_instance();

  static inline const OptionList* internal_default_instance() {
    return reinterpret_cast<const OptionList*>(
               &_OptionList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OptionList* other);

  // implements Message ----------------------------------------------

  inline OptionList* New() const PROTOBUF_FINAL { return New(NULL); }

  OptionList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptionList& from);
  void MergeFrom(const OptionList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tctrl.schema.ParamOption option = 3;
  int option_size() const;
  void clear_option();
  static const int kOptionFieldNumber = 3;
  const ::tctrl::schema::ParamOption& option(int index) const;
  ::tctrl::schema::ParamOption* mutable_option(int index);
  ::tctrl::schema::ParamOption* add_option();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >*
      mutable_option();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >&
      option() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:tctrl.schema.OptionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption > option_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamPartSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ParamPartSpec) */ {
 public:
  ParamPartSpec();
  virtual ~ParamPartSpec();

  ParamPartSpec(const ParamPartSpec& from);

  inline ParamPartSpec& operator=(const ParamPartSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamPartSpec& default_instance();

  static inline const ParamPartSpec* internal_default_instance() {
    return reinterpret_cast<const ParamPartSpec*>(
               &_ParamPartSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ParamPartSpec* other);

  // implements Message ----------------------------------------------

  inline ParamPartSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamPartSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamPartSpec& from);
  void MergeFrom(const ParamPartSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamPartSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string path = 9;
  void clear_path();
  static const int kPathFieldNumber = 9;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .google.protobuf.Value minLimit = 3;
  bool has_minlimit() const;
  void clear_minlimit();
  static const int kMinLimitFieldNumber = 3;
  const ::google::protobuf::Value& minlimit() const;
  ::google::protobuf::Value* mutable_minlimit();
  ::google::protobuf::Value* release_minlimit();
  void set_allocated_minlimit(::google::protobuf::Value* minlimit);

  // .google.protobuf.Value maxLimit = 4;
  bool has_maxlimit() const;
  void clear_maxlimit();
  static const int kMaxLimitFieldNumber = 4;
  const ::google::protobuf::Value& maxlimit() const;
  ::google::protobuf::Value* mutable_maxlimit();
  ::google::protobuf::Value* release_maxlimit();
  void set_allocated_maxlimit(::google::protobuf::Value* maxlimit);

  // .google.protobuf.Value minNorm = 5;
  bool has_minnorm() const;
  void clear_minnorm();
  static const int kMinNormFieldNumber = 5;
  const ::google::protobuf::Value& minnorm() const;
  ::google::protobuf::Value* mutable_minnorm();
  ::google::protobuf::Value* release_minnorm();
  void set_allocated_minnorm(::google::protobuf::Value* minnorm);

  // .google.protobuf.Value maxNorm = 6;
  bool has_maxnorm() const;
  void clear_maxnorm();
  static const int kMaxNormFieldNumber = 6;
  const ::google::protobuf::Value& maxnorm() const;
  ::google::protobuf::Value* mutable_maxnorm();
  ::google::protobuf::Value* release_maxnorm();
  void set_allocated_maxnorm(::google::protobuf::Value* maxnorm);

  // .google.protobuf.Value defaultVal = 7;
  bool has_defaultval() const;
  void clear_defaultval();
  static const int kDefaultValFieldNumber = 7;
  const ::google::protobuf::Value& defaultval() const;
  ::google::protobuf::Value* mutable_defaultval();
  ::google::protobuf::Value* release_defaultval();
  void set_allocated_defaultval(::google::protobuf::Value* defaultval);

  // .google.protobuf.Value value = 8;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 8;
  const ::google::protobuf::Value& value() const;
  ::google::protobuf::Value* mutable_value();
  ::google::protobuf::Value* release_value();
  void set_allocated_value(::google::protobuf::Value* value);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ParamPartSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::Value* minlimit_;
  ::google::protobuf::Value* maxlimit_;
  ::google::protobuf::Value* minnorm_;
  ::google::protobuf::Value* maxnorm_;
  ::google::protobuf::Value* defaultval_;
  ::google::protobuf::Value* value_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tctrl.schema.ParamPartSpec part = 13;
  int part_size() const;
  void clear_part();
  static const int kPartFieldNumber = 13;
  const ::tctrl::schema::ParamPartSpec& part(int index) const;
  ::tctrl::schema::ParamPartSpec* mutable_part(int index);
  ::tctrl::schema::ParamPartSpec* add_part();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamPartSpec >*
      mutable_part();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamPartSpec >&
      part() const;

  // repeated .tctrl.schema.ParamOption option = 16;
  int option_size() const;
  void clear_option();
  static const int kOptionFieldNumber = 16;
  const ::tctrl::schema::ParamOption& option(int index) const;
  ::tctrl::schema::ParamOption* mutable_option(int index);
  ::tctrl::schema::ParamOption* add_option();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >*
      mutable_option();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >&
      option() const;

  // repeated string tag = 18;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 18;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string otherType = 5;
  void clear_othertype();
  static const int kOtherTypeFieldNumber = 5;
  const ::std::string& othertype() const;
  void set_othertype(const ::std::string& value);
  #if LANG_CXX11
  void set_othertype(::std::string&& value);
  #endif
  void set_othertype(const char* value);
  void set_othertype(const char* value, size_t size);
  ::std::string* mutable_othertype();
  ::std::string* release_othertype();
  void set_allocated_othertype(::std::string* othertype);

  // string style = 14;
  void clear_style();
  static const int kStyleFieldNumber = 14;
  const ::std::string& style() const;
  void set_style(const ::std::string& value);
  #if LANG_CXX11
  void set_style(::std::string&& value);
  #endif
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  ::std::string* mutable_style();
  ::std::string* release_style();
  void set_allocated_style(::std::string* style);

  // string group = 15;
  void clear_group();
  static const int kGroupFieldNumber = 15;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // string optionListKey = 17;
  void clear_optionlistkey();
  static const int kOptionListKeyFieldNumber = 17;
  const ::std::string& optionlistkey() const;
  void set_optionlistkey(const ::std::string& value);
  #if LANG_CXX11
  void set_optionlistkey(::std::string&& value);
  #endif
  void set_optionlistkey(const char* value);
  void set_optionlistkey(const char* value, size_t size);
  ::std::string* mutable_optionlistkey();
  ::std::string* release_optionlistkey();
  void set_allocated_optionlistkey(::std::string* optionlistkey);

  // string help = 19;
  void clear_help();
  static const int kHelpFieldNumber = 19;
  const ::std::string& help() const;
  void set_help(const ::std::string& value);
  #if LANG_CXX11
  void set_help(::std::string&& value);
  #endif
  void set_help(const char* value);
  void set_help(const char* value, size_t size);
  ::std::string* mutable_help();
  ::std::string* release_help();
  void set_allocated_help(::std::string* help);

  // string offHelp = 20;
  void clear_offhelp();
  static const int kOffHelpFieldNumber = 20;
  const ::std::string& offhelp() const;
  void set_offhelp(const ::std::string& value);
  #if LANG_CXX11
  void set_offhelp(::std::string&& value);
  #endif
  void set_offhelp(const char* value);
  void set_offhelp(const char* value, size_t size);
  ::std::string* mutable_offhelp();
  ::std::string* release_offhelp();
  void set_allocated_offhelp(::std::string* offhelp);

  // string buttonText = 21;
  void clear_buttontext();
  static const int kButtonTextFieldNumber = 21;
  const ::std::string& buttontext() const;
  void set_buttontext(const ::std::string& value);
  #if LANG_CXX11
  void set_buttontext(::std::string&& value);
  #endif
  void set_buttontext(const char* value);
  void set_buttontext(const char* value, size_t size);
  ::std::string* mutable_buttontext();
  ::std::string* release_buttontext();
  void set_allocated_buttontext(::std::string* buttontext);

  // string buttonOffText = 22;
  void clear_buttonofftext();
  static const int kButtonOffTextFieldNumber = 22;
  const ::std::string& buttonofftext() const;
  void set_buttonofftext(const ::std::string& value);
  #if LANG_CXX11
  void set_buttonofftext(::std::string&& value);
  #endif
  void set_buttonofftext(const char* value);
  void set_buttonofftext(const char* value, size_t size);
  ::std::string* mutable_buttonofftext();
  ::std::string* release_buttonofftext();
  void set_allocated_buttonofftext(::std::string* buttonofftext);

  // .google.protobuf.Value minLimit = 6;
  bool has_minlimit() const;
  void clear_minlimit();
  static const int kMinLimitFieldNumber = 6;
  const ::google::protobuf::Value& minlimit() const;
  ::google::protobuf::Value* mutable_minlimit();
  ::google::protobuf::Value* release_minlimit();
  void set_allocated_minlimit(::google::protobuf::Value* minlimit);

  // .google.protobuf.Value maxLimit = 7;
  bool has_maxlimit() const;
  void clear_maxlimit();
  static const int kMaxLimitFieldNumber = 7;
  const ::google::protobuf::Value& maxlimit() const;
  ::google::protobuf::Value* mutable_maxlimit();
  ::google::protobuf::Value* release_maxlimit();
  void set_allocated_maxlimit(::google::protobuf::Value* maxlimit);

  // .google.protobuf.Value minNorm = 8;
  bool has_minnorm() const;
  void clear_minnorm();
  static const int kMinNormFieldNumber = 8;
  const ::google::protobuf::Value& minnorm() const;
  ::google::protobuf::Value* mutable_minnorm();
  ::google::protobuf::Value* release_minnorm();
  void set_allocated_minnorm(::google::protobuf::Value* minnorm);

  // .google.protobuf.Value maxNorm = 9;
  bool has_maxnorm() const;
  void clear_maxnorm();
  static const int kMaxNormFieldNumber = 9;
  const ::google::protobuf::Value& maxnorm() const;
  ::google::protobuf::Value* mutable_maxnorm();
  ::google::protobuf::Value* release_maxnorm();
  void set_allocated_maxnorm(::google::protobuf::Value* maxnorm);

  // .google.protobuf.Value defaultVal = 10;
  bool has_defaultval() const;
  void clear_defaultval();
  static const int kDefaultValFieldNumber = 10;
  const ::google::protobuf::Value& defaultval() const;
  ::google::protobuf::Value* mutable_defaultval();
  ::google::protobuf::Value* release_defaultval();
  void set_allocated_defaultval(::google::protobuf::Value* defaultval);

  // .google.protobuf.Value value = 11;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 11;
  const ::google::protobuf::Value& value() const;
  ::google::protobuf::Value* mutable_value();
  ::google::protobuf::Value* release_value();
  void set_allocated_value(::google::protobuf::Value* value);

  // .google.protobuf.Int32Value valueIndex = 12;
  bool has_valueindex() const;
  void clear_valueindex();
  static const int kValueIndexFieldNumber = 12;
  const ::google::protobuf::Int32Value& valueindex() const;
  ::google::protobuf::Int32Value* mutable_valueindex();
  ::google::protobuf::Int32Value* release_valueindex();
  void set_allocated_valueindex(::google::protobuf::Int32Value* valueindex);

  // .google.protobuf.Struct properties = 1000;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 1000;
  const ::google::protobuf::Struct& properties() const;
  ::google::protobuf::Struct* mutable_properties();
  ::google::protobuf::Struct* release_properties();
  void set_allocated_properties(::google::protobuf::Struct* properties);

  // .tctrl.schema.ParamType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::tctrl::schema::ParamType type() const;
  void set_type(::tctrl::schema::ParamType value);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ParamSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamPartSpec > part_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption > option_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr othertype_;
  ::google::protobuf::internal::ArenaStringPtr style_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr optionlistkey_;
  ::google::protobuf::internal::ArenaStringPtr help_;
  ::google::protobuf::internal::ArenaStringPtr offhelp_;
  ::google::protobuf::internal::ArenaStringPtr buttontext_;
  ::google::protobuf::internal::ArenaStringPtr buttonofftext_;
  ::google::protobuf::Value* minlimit_;
  ::google::protobuf::Value* maxlimit_;
  ::google::protobuf::Value* minnorm_;
  ::google::protobuf::Value* maxnorm_;
  ::google::protobuf::Value* defaultval_;
  ::google::protobuf::Value* value_;
  ::google::protobuf::Int32Value* valueindex_;
  ::google::protobuf::Struct* properties_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModuleTypeSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ModuleTypeSpec) */ {
 public:
  ModuleTypeSpec();
  virtual ~ModuleTypeSpec();

  ModuleTypeSpec(const ModuleTypeSpec& from);

  inline ModuleTypeSpec& operator=(const ModuleTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleTypeSpec& default_instance();

  static inline const ModuleTypeSpec* internal_default_instance() {
    return reinterpret_cast<const ModuleTypeSpec*>(
               &_ModuleTypeSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ModuleTypeSpec* other);

  // implements Message ----------------------------------------------

  inline ModuleTypeSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ModuleTypeSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModuleTypeSpec& from);
  void MergeFrom(const ModuleTypeSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModuleTypeSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tctrl.schema.ParamSpec param = 7;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 7;
  const ::tctrl::schema::ParamSpec& param(int index) const;
  ::tctrl::schema::ParamSpec* mutable_param(int index);
  ::tctrl::schema::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >&
      param() const;

  // repeated .tctrl.schema.GroupInfo paramGroup = 9;
  int paramgroup_size() const;
  void clear_paramgroup();
  static const int kParamGroupFieldNumber = 9;
  const ::tctrl::schema::GroupInfo& paramgroup(int index) const;
  ::tctrl::schema::GroupInfo* mutable_paramgroup(int index);
  ::tctrl::schema::GroupInfo* add_paramgroup();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
      mutable_paramgroup();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
      paramgroup() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ModuleTypeSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo > paramgroup_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModuleSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ModuleSpec) */ {
 public:
  ModuleSpec();
  virtual ~ModuleSpec();

  ModuleSpec(const ModuleSpec& from);

  inline ModuleSpec& operator=(const ModuleSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleSpec& default_instance();

  static inline const ModuleSpec* internal_default_instance() {
    return reinterpret_cast<const ModuleSpec*>(
               &_ModuleSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ModuleSpec* other);

  // implements Message ----------------------------------------------

  inline ModuleSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ModuleSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModuleSpec& from);
  void MergeFrom(const ModuleSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModuleSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 6;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 6;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // repeated .tctrl.schema.ParamSpec param = 7;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 7;
  const ::tctrl::schema::ParamSpec& param(int index) const;
  ::tctrl::schema::ParamSpec* mutable_param(int index);
  ::tctrl::schema::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >&
      param() const;

  // repeated .tctrl.schema.ModuleSpec childModule = 8;
  int childmodule_size() const;
  void clear_childmodule();
  static const int kChildModuleFieldNumber = 8;
  const ::tctrl::schema::ModuleSpec& childmodule(int index) const;
  ::tctrl::schema::ModuleSpec* mutable_childmodule(int index);
  ::tctrl::schema::ModuleSpec* add_childmodule();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >*
      mutable_childmodule();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >&
      childmodule() const;

  // repeated .tctrl.schema.GroupInfo paramGroup = 9;
  int paramgroup_size() const;
  void clear_paramgroup();
  static const int kParamGroupFieldNumber = 9;
  const ::tctrl::schema::GroupInfo& paramgroup(int index) const;
  ::tctrl::schema::GroupInfo* mutable_paramgroup(int index);
  ::tctrl::schema::GroupInfo* add_paramgroup();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
      mutable_paramgroup();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
      paramgroup() const;

  // repeated .tctrl.schema.GroupInfo childGroup = 10;
  int childgroup_size() const;
  void clear_childgroup();
  static const int kChildGroupFieldNumber = 10;
  const ::tctrl::schema::GroupInfo& childgroup(int index) const;
  ::tctrl::schema::GroupInfo* mutable_childgroup(int index);
  ::tctrl::schema::GroupInfo* add_childgroup();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
      mutable_childgroup();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
      childgroup() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string path = 3;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string moduleType = 4;
  void clear_moduletype();
  static const int kModuleTypeFieldNumber = 4;
  const ::std::string& moduletype() const;
  void set_moduletype(const ::std::string& value);
  #if LANG_CXX11
  void set_moduletype(::std::string&& value);
  #endif
  void set_moduletype(const char* value);
  void set_moduletype(const char* value, size_t size);
  ::std::string* mutable_moduletype();
  ::std::string* release_moduletype();
  void set_allocated_moduletype(::std::string* moduletype);

  // string group = 5;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ModuleSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec > childmodule_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo > paramgroup_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo > childgroup_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr moduletype_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.ConnectionInfo) */ {
 public:
  ConnectionInfo();
  virtual ~ConnectionInfo();

  ConnectionInfo(const ConnectionInfo& from);

  inline ConnectionInfo& operator=(const ConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionInfo& default_instance();

  static inline const ConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionInfo*>(
               &_ConnectionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ConnectionInfo* other);

  // implements Message ----------------------------------------------

  inline ConnectionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectionInfo& from);
  void MergeFrom(const ConnectionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string host = 4;
  void clear_host();
  static const int kHostFieldNumber = 4;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tctrl.schema.ConnectionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GroupInfo* other);

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 3;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:tctrl.schema.GroupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tctrl.schema.AppSpec) */ {
 public:
  AppSpec();
  virtual ~AppSpec();

  AppSpec(const AppSpec& from);

  inline AppSpec& operator=(const AppSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppSpec& default_instance();

  static inline const AppSpec* internal_default_instance() {
    return reinterpret_cast<const AppSpec*>(
               &_AppSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AppSpec* other);

  // implements Message ----------------------------------------------

  inline AppSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  AppSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppSpec& from);
  void MergeFrom(const AppSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tag = 3;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 3;
  const ::std::string& tag(int index) const;
  ::std::string* mutable_tag(int index);
  void set_tag(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tag(int index, ::std::string&& value);
  #endif
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  ::std::string* add_tag();
  void add_tag(const ::std::string& value);
  #if LANG_CXX11
  void add_tag(::std::string&& value);
  #endif
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tag() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tag();

  // repeated .tctrl.schema.ModuleSpec childModule = 5;
  int childmodule_size() const;
  void clear_childmodule();
  static const int kChildModuleFieldNumber = 5;
  const ::tctrl::schema::ModuleSpec& childmodule(int index) const;
  ::tctrl::schema::ModuleSpec* mutable_childmodule(int index);
  ::tctrl::schema::ModuleSpec* add_childmodule();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >*
      mutable_childmodule();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >&
      childmodule() const;

  // repeated .tctrl.schema.GroupInfo childGroup = 6;
  int childgroup_size() const;
  void clear_childgroup();
  static const int kChildGroupFieldNumber = 6;
  const ::tctrl::schema::GroupInfo& childgroup(int index) const;
  ::tctrl::schema::GroupInfo* mutable_childgroup(int index);
  ::tctrl::schema::GroupInfo* add_childgroup();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
      mutable_childgroup();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
      childgroup() const;

  // repeated .tctrl.schema.OptionList optionList = 7;
  int optionlist_size() const;
  void clear_optionlist();
  static const int kOptionListFieldNumber = 7;
  const ::tctrl::schema::OptionList& optionlist(int index) const;
  ::tctrl::schema::OptionList* mutable_optionlist(int index);
  ::tctrl::schema::OptionList* add_optionlist();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::OptionList >*
      mutable_optionlist();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::OptionList >&
      optionlist() const;

  // repeated .tctrl.schema.ConnectionInfo connection = 8;
  int connection_size() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 8;
  const ::tctrl::schema::ConnectionInfo& connection(int index) const;
  ::tctrl::schema::ConnectionInfo* mutable_connection(int index);
  ::tctrl::schema::ConnectionInfo* add_connection();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ConnectionInfo >*
      mutable_connection();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ConnectionInfo >&
      connection() const;

  // repeated .tctrl.schema.ModuleTypeSpec moduleType = 9;
  int moduletype_size() const;
  void clear_moduletype();
  static const int kModuleTypeFieldNumber = 9;
  const ::tctrl::schema::ModuleTypeSpec& moduletype(int index) const;
  ::tctrl::schema::ModuleTypeSpec* mutable_moduletype(int index);
  ::tctrl::schema::ModuleTypeSpec* add_moduletype();
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleTypeSpec >*
      mutable_moduletype();
  const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleTypeSpec >&
      moduletype() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string path = 10;
  void clear_path();
  static const int kPathFieldNumber = 10;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:tctrl.schema.AppSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tag_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec > childmodule_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo > childgroup_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::OptionList > optionlist_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ConnectionInfo > connection_;
  ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleTypeSpec > moduletype_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_tctrl_2dschema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamOption

// string key = 1;
inline void ParamOption::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamOption::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamOption.key)
  return key_.GetNoArena();
}
inline void ParamOption::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamOption.key)
}
#if LANG_CXX11
inline void ParamOption::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamOption.key)
}
#endif
inline void ParamOption::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamOption.key)
}
inline void ParamOption::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamOption.key)
}
inline ::std::string* ParamOption::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamOption.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamOption::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamOption.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamOption::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamOption.key)
}

// string label = 2;
inline void ParamOption::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamOption::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamOption.label)
  return label_.GetNoArena();
}
inline void ParamOption::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamOption.label)
}
#if LANG_CXX11
inline void ParamOption::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamOption.label)
}
#endif
inline void ParamOption::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamOption.label)
}
inline void ParamOption::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamOption.label)
}
inline ::std::string* ParamOption::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamOption.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamOption::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamOption.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamOption::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamOption.label)
}

// -------------------------------------------------------------------

// OptionList

// string key = 1;
inline void OptionList::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionList::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.OptionList.key)
  return key_.GetNoArena();
}
inline void OptionList::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.OptionList.key)
}
#if LANG_CXX11
inline void OptionList::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.OptionList.key)
}
#endif
inline void OptionList::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.OptionList.key)
}
inline void OptionList::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.OptionList.key)
}
inline ::std::string* OptionList::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.OptionList.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionList::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.OptionList.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionList::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.OptionList.key)
}

// string label = 2;
inline void OptionList::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionList::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.OptionList.label)
  return label_.GetNoArena();
}
inline void OptionList::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.OptionList.label)
}
#if LANG_CXX11
inline void OptionList::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.OptionList.label)
}
#endif
inline void OptionList::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.OptionList.label)
}
inline void OptionList::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.OptionList.label)
}
inline ::std::string* OptionList::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.OptionList.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionList::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.OptionList.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionList::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.OptionList.label)
}

// repeated .tctrl.schema.ParamOption option = 3;
inline int OptionList::option_size() const {
  return option_.size();
}
inline void OptionList::clear_option() {
  option_.Clear();
}
inline const ::tctrl::schema::ParamOption& OptionList::option(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.OptionList.option)
  return option_.Get(index);
}
inline ::tctrl::schema::ParamOption* OptionList::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.OptionList.option)
  return option_.Mutable(index);
}
inline ::tctrl::schema::ParamOption* OptionList::add_option() {
  // @@protoc_insertion_point(field_add:tctrl.schema.OptionList.option)
  return option_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >*
OptionList::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.OptionList.option)
  return &option_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >&
OptionList::option() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.OptionList.option)
  return option_;
}

// -------------------------------------------------------------------

// ParamPartSpec

// string key = 1;
inline void ParamPartSpec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamPartSpec::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.key)
  return key_.GetNoArena();
}
inline void ParamPartSpec::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamPartSpec.key)
}
#if LANG_CXX11
inline void ParamPartSpec::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamPartSpec.key)
}
#endif
inline void ParamPartSpec::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamPartSpec.key)
}
inline void ParamPartSpec::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamPartSpec.key)
}
inline ::std::string* ParamPartSpec::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamPartSpec::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamPartSpec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.key)
}

// string label = 2;
inline void ParamPartSpec::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamPartSpec::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.label)
  return label_.GetNoArena();
}
inline void ParamPartSpec::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamPartSpec.label)
}
#if LANG_CXX11
inline void ParamPartSpec::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamPartSpec.label)
}
#endif
inline void ParamPartSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamPartSpec.label)
}
inline void ParamPartSpec::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamPartSpec.label)
}
inline ::std::string* ParamPartSpec::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamPartSpec::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamPartSpec::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.label)
}

// string path = 9;
inline void ParamPartSpec::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamPartSpec::path() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.path)
  return path_.GetNoArena();
}
inline void ParamPartSpec::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamPartSpec.path)
}
#if LANG_CXX11
inline void ParamPartSpec::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamPartSpec.path)
}
#endif
inline void ParamPartSpec::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamPartSpec.path)
}
inline void ParamPartSpec::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamPartSpec.path)
}
inline ::std::string* ParamPartSpec::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamPartSpec::release_path() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamPartSpec::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.path)
}

// .google.protobuf.Value minLimit = 3;
inline bool ParamPartSpec::has_minlimit() const {
  return this != internal_default_instance() && minlimit_ != NULL;
}
inline void ParamPartSpec::clear_minlimit() {
  if (GetArenaNoVirtual() == NULL && minlimit_ != NULL) delete minlimit_;
  minlimit_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::minlimit() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.minLimit)
  return minlimit_ != NULL ? *minlimit_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_minlimit() {
  
  if (minlimit_ == NULL) {
    minlimit_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.minLimit)
  return minlimit_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_minlimit() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.minLimit)
  
  ::google::protobuf::Value* temp = minlimit_;
  minlimit_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_minlimit(::google::protobuf::Value* minlimit) {
  delete minlimit_;
  if (minlimit != NULL && minlimit->GetArena() != NULL) {
    ::google::protobuf::Value* new_minlimit = new ::google::protobuf::Value;
    new_minlimit->CopyFrom(*minlimit);
    minlimit = new_minlimit;
  }
  minlimit_ = minlimit;
  if (minlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.minLimit)
}

// .google.protobuf.Value maxLimit = 4;
inline bool ParamPartSpec::has_maxlimit() const {
  return this != internal_default_instance() && maxlimit_ != NULL;
}
inline void ParamPartSpec::clear_maxlimit() {
  if (GetArenaNoVirtual() == NULL && maxlimit_ != NULL) delete maxlimit_;
  maxlimit_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::maxlimit() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.maxLimit)
  return maxlimit_ != NULL ? *maxlimit_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_maxlimit() {
  
  if (maxlimit_ == NULL) {
    maxlimit_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.maxLimit)
  return maxlimit_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_maxlimit() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.maxLimit)
  
  ::google::protobuf::Value* temp = maxlimit_;
  maxlimit_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_maxlimit(::google::protobuf::Value* maxlimit) {
  delete maxlimit_;
  if (maxlimit != NULL && maxlimit->GetArena() != NULL) {
    ::google::protobuf::Value* new_maxlimit = new ::google::protobuf::Value;
    new_maxlimit->CopyFrom(*maxlimit);
    maxlimit = new_maxlimit;
  }
  maxlimit_ = maxlimit;
  if (maxlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.maxLimit)
}

// .google.protobuf.Value minNorm = 5;
inline bool ParamPartSpec::has_minnorm() const {
  return this != internal_default_instance() && minnorm_ != NULL;
}
inline void ParamPartSpec::clear_minnorm() {
  if (GetArenaNoVirtual() == NULL && minnorm_ != NULL) delete minnorm_;
  minnorm_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::minnorm() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.minNorm)
  return minnorm_ != NULL ? *minnorm_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_minnorm() {
  
  if (minnorm_ == NULL) {
    minnorm_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.minNorm)
  return minnorm_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_minnorm() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.minNorm)
  
  ::google::protobuf::Value* temp = minnorm_;
  minnorm_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_minnorm(::google::protobuf::Value* minnorm) {
  delete minnorm_;
  if (minnorm != NULL && minnorm->GetArena() != NULL) {
    ::google::protobuf::Value* new_minnorm = new ::google::protobuf::Value;
    new_minnorm->CopyFrom(*minnorm);
    minnorm = new_minnorm;
  }
  minnorm_ = minnorm;
  if (minnorm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.minNorm)
}

// .google.protobuf.Value maxNorm = 6;
inline bool ParamPartSpec::has_maxnorm() const {
  return this != internal_default_instance() && maxnorm_ != NULL;
}
inline void ParamPartSpec::clear_maxnorm() {
  if (GetArenaNoVirtual() == NULL && maxnorm_ != NULL) delete maxnorm_;
  maxnorm_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::maxnorm() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.maxNorm)
  return maxnorm_ != NULL ? *maxnorm_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_maxnorm() {
  
  if (maxnorm_ == NULL) {
    maxnorm_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.maxNorm)
  return maxnorm_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_maxnorm() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.maxNorm)
  
  ::google::protobuf::Value* temp = maxnorm_;
  maxnorm_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_maxnorm(::google::protobuf::Value* maxnorm) {
  delete maxnorm_;
  if (maxnorm != NULL && maxnorm->GetArena() != NULL) {
    ::google::protobuf::Value* new_maxnorm = new ::google::protobuf::Value;
    new_maxnorm->CopyFrom(*maxnorm);
    maxnorm = new_maxnorm;
  }
  maxnorm_ = maxnorm;
  if (maxnorm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.maxNorm)
}

// .google.protobuf.Value defaultVal = 7;
inline bool ParamPartSpec::has_defaultval() const {
  return this != internal_default_instance() && defaultval_ != NULL;
}
inline void ParamPartSpec::clear_defaultval() {
  if (GetArenaNoVirtual() == NULL && defaultval_ != NULL) delete defaultval_;
  defaultval_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::defaultval() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.defaultVal)
  return defaultval_ != NULL ? *defaultval_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_defaultval() {
  
  if (defaultval_ == NULL) {
    defaultval_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.defaultVal)
  return defaultval_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_defaultval() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.defaultVal)
  
  ::google::protobuf::Value* temp = defaultval_;
  defaultval_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_defaultval(::google::protobuf::Value* defaultval) {
  delete defaultval_;
  if (defaultval != NULL && defaultval->GetArena() != NULL) {
    ::google::protobuf::Value* new_defaultval = new ::google::protobuf::Value;
    new_defaultval->CopyFrom(*defaultval);
    defaultval = new_defaultval;
  }
  defaultval_ = defaultval;
  if (defaultval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.defaultVal)
}

// .google.protobuf.Value value = 8;
inline bool ParamPartSpec::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ParamPartSpec::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Value& ParamPartSpec::value() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamPartSpec.value)
  return value_ != NULL ? *value_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamPartSpec::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamPartSpec.value)
  return value_;
}
inline ::google::protobuf::Value* ParamPartSpec::release_value() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamPartSpec.value)
  
  ::google::protobuf::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ParamPartSpec::set_allocated_value(::google::protobuf::Value* value) {
  delete value_;
  if (value != NULL && value->GetArena() != NULL) {
    ::google::protobuf::Value* new_value = new ::google::protobuf::Value;
    new_value->CopyFrom(*value);
    value = new_value;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamPartSpec.value)
}

// -------------------------------------------------------------------

// ParamSpec

// string key = 1;
inline void ParamSpec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.key)
  return key_.GetNoArena();
}
inline void ParamSpec::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.key)
}
#if LANG_CXX11
inline void ParamSpec::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.key)
}
#endif
inline void ParamSpec::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.key)
}
inline void ParamSpec::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.key)
}
inline ::std::string* ParamSpec::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.key)
}

// string label = 2;
inline void ParamSpec::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.label)
  return label_.GetNoArena();
}
inline void ParamSpec::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.label)
}
#if LANG_CXX11
inline void ParamSpec::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.label)
}
#endif
inline void ParamSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.label)
}
inline void ParamSpec::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.label)
}
inline ::std::string* ParamSpec::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.label)
}

// .tctrl.schema.ParamType type = 3;
inline void ParamSpec::clear_type() {
  type_ = 0;
}
inline ::tctrl::schema::ParamType ParamSpec::type() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.type)
  return static_cast< ::tctrl::schema::ParamType >(type_);
}
inline void ParamSpec::set_type(::tctrl::schema::ParamType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.type)
}

// string path = 4;
inline void ParamSpec::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::path() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.path)
  return path_.GetNoArena();
}
inline void ParamSpec::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.path)
}
#if LANG_CXX11
inline void ParamSpec::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.path)
}
#endif
inline void ParamSpec::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.path)
}
inline void ParamSpec::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.path)
}
inline ::std::string* ParamSpec::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_path() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.path)
}

// string otherType = 5;
inline void ParamSpec::clear_othertype() {
  othertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::othertype() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.otherType)
  return othertype_.GetNoArena();
}
inline void ParamSpec::set_othertype(const ::std::string& value) {
  
  othertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.otherType)
}
#if LANG_CXX11
inline void ParamSpec::set_othertype(::std::string&& value) {
  
  othertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.otherType)
}
#endif
inline void ParamSpec::set_othertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  othertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.otherType)
}
inline void ParamSpec::set_othertype(const char* value, size_t size) {
  
  othertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.otherType)
}
inline ::std::string* ParamSpec::mutable_othertype() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.otherType)
  return othertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_othertype() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.otherType)
  
  return othertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_othertype(::std::string* othertype) {
  if (othertype != NULL) {
    
  } else {
    
  }
  othertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), othertype);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.otherType)
}

// .google.protobuf.Value minLimit = 6;
inline bool ParamSpec::has_minlimit() const {
  return this != internal_default_instance() && minlimit_ != NULL;
}
inline void ParamSpec::clear_minlimit() {
  if (GetArenaNoVirtual() == NULL && minlimit_ != NULL) delete minlimit_;
  minlimit_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::minlimit() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.minLimit)
  return minlimit_ != NULL ? *minlimit_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_minlimit() {
  
  if (minlimit_ == NULL) {
    minlimit_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.minLimit)
  return minlimit_;
}
inline ::google::protobuf::Value* ParamSpec::release_minlimit() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.minLimit)
  
  ::google::protobuf::Value* temp = minlimit_;
  minlimit_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_minlimit(::google::protobuf::Value* minlimit) {
  delete minlimit_;
  if (minlimit != NULL && minlimit->GetArena() != NULL) {
    ::google::protobuf::Value* new_minlimit = new ::google::protobuf::Value;
    new_minlimit->CopyFrom(*minlimit);
    minlimit = new_minlimit;
  }
  minlimit_ = minlimit;
  if (minlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.minLimit)
}

// .google.protobuf.Value maxLimit = 7;
inline bool ParamSpec::has_maxlimit() const {
  return this != internal_default_instance() && maxlimit_ != NULL;
}
inline void ParamSpec::clear_maxlimit() {
  if (GetArenaNoVirtual() == NULL && maxlimit_ != NULL) delete maxlimit_;
  maxlimit_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::maxlimit() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.maxLimit)
  return maxlimit_ != NULL ? *maxlimit_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_maxlimit() {
  
  if (maxlimit_ == NULL) {
    maxlimit_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.maxLimit)
  return maxlimit_;
}
inline ::google::protobuf::Value* ParamSpec::release_maxlimit() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.maxLimit)
  
  ::google::protobuf::Value* temp = maxlimit_;
  maxlimit_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_maxlimit(::google::protobuf::Value* maxlimit) {
  delete maxlimit_;
  if (maxlimit != NULL && maxlimit->GetArena() != NULL) {
    ::google::protobuf::Value* new_maxlimit = new ::google::protobuf::Value;
    new_maxlimit->CopyFrom(*maxlimit);
    maxlimit = new_maxlimit;
  }
  maxlimit_ = maxlimit;
  if (maxlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.maxLimit)
}

// .google.protobuf.Value minNorm = 8;
inline bool ParamSpec::has_minnorm() const {
  return this != internal_default_instance() && minnorm_ != NULL;
}
inline void ParamSpec::clear_minnorm() {
  if (GetArenaNoVirtual() == NULL && minnorm_ != NULL) delete minnorm_;
  minnorm_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::minnorm() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.minNorm)
  return minnorm_ != NULL ? *minnorm_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_minnorm() {
  
  if (minnorm_ == NULL) {
    minnorm_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.minNorm)
  return minnorm_;
}
inline ::google::protobuf::Value* ParamSpec::release_minnorm() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.minNorm)
  
  ::google::protobuf::Value* temp = minnorm_;
  minnorm_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_minnorm(::google::protobuf::Value* minnorm) {
  delete minnorm_;
  if (minnorm != NULL && minnorm->GetArena() != NULL) {
    ::google::protobuf::Value* new_minnorm = new ::google::protobuf::Value;
    new_minnorm->CopyFrom(*minnorm);
    minnorm = new_minnorm;
  }
  minnorm_ = minnorm;
  if (minnorm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.minNorm)
}

// .google.protobuf.Value maxNorm = 9;
inline bool ParamSpec::has_maxnorm() const {
  return this != internal_default_instance() && maxnorm_ != NULL;
}
inline void ParamSpec::clear_maxnorm() {
  if (GetArenaNoVirtual() == NULL && maxnorm_ != NULL) delete maxnorm_;
  maxnorm_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::maxnorm() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.maxNorm)
  return maxnorm_ != NULL ? *maxnorm_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_maxnorm() {
  
  if (maxnorm_ == NULL) {
    maxnorm_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.maxNorm)
  return maxnorm_;
}
inline ::google::protobuf::Value* ParamSpec::release_maxnorm() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.maxNorm)
  
  ::google::protobuf::Value* temp = maxnorm_;
  maxnorm_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_maxnorm(::google::protobuf::Value* maxnorm) {
  delete maxnorm_;
  if (maxnorm != NULL && maxnorm->GetArena() != NULL) {
    ::google::protobuf::Value* new_maxnorm = new ::google::protobuf::Value;
    new_maxnorm->CopyFrom(*maxnorm);
    maxnorm = new_maxnorm;
  }
  maxnorm_ = maxnorm;
  if (maxnorm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.maxNorm)
}

// .google.protobuf.Value defaultVal = 10;
inline bool ParamSpec::has_defaultval() const {
  return this != internal_default_instance() && defaultval_ != NULL;
}
inline void ParamSpec::clear_defaultval() {
  if (GetArenaNoVirtual() == NULL && defaultval_ != NULL) delete defaultval_;
  defaultval_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::defaultval() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.defaultVal)
  return defaultval_ != NULL ? *defaultval_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_defaultval() {
  
  if (defaultval_ == NULL) {
    defaultval_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.defaultVal)
  return defaultval_;
}
inline ::google::protobuf::Value* ParamSpec::release_defaultval() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.defaultVal)
  
  ::google::protobuf::Value* temp = defaultval_;
  defaultval_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_defaultval(::google::protobuf::Value* defaultval) {
  delete defaultval_;
  if (defaultval != NULL && defaultval->GetArena() != NULL) {
    ::google::protobuf::Value* new_defaultval = new ::google::protobuf::Value;
    new_defaultval->CopyFrom(*defaultval);
    defaultval = new_defaultval;
  }
  defaultval_ = defaultval;
  if (defaultval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.defaultVal)
}

// .google.protobuf.Value value = 11;
inline bool ParamSpec::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ParamSpec::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Value& ParamSpec::value() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.value)
  return value_ != NULL ? *value_
                         : *::google::protobuf::Value::internal_default_instance();
}
inline ::google::protobuf::Value* ParamSpec::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.value)
  return value_;
}
inline ::google::protobuf::Value* ParamSpec::release_value() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.value)
  
  ::google::protobuf::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_value(::google::protobuf::Value* value) {
  delete value_;
  if (value != NULL && value->GetArena() != NULL) {
    ::google::protobuf::Value* new_value = new ::google::protobuf::Value;
    new_value->CopyFrom(*value);
    value = new_value;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.value)
}

// .google.protobuf.Int32Value valueIndex = 12;
inline bool ParamSpec::has_valueindex() const {
  return this != internal_default_instance() && valueindex_ != NULL;
}
inline void ParamSpec::clear_valueindex() {
  if (GetArenaNoVirtual() == NULL && valueindex_ != NULL) delete valueindex_;
  valueindex_ = NULL;
}
inline const ::google::protobuf::Int32Value& ParamSpec::valueindex() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.valueIndex)
  return valueindex_ != NULL ? *valueindex_
                         : *::google::protobuf::Int32Value::internal_default_instance();
}
inline ::google::protobuf::Int32Value* ParamSpec::mutable_valueindex() {
  
  if (valueindex_ == NULL) {
    valueindex_ = new ::google::protobuf::Int32Value;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.valueIndex)
  return valueindex_;
}
inline ::google::protobuf::Int32Value* ParamSpec::release_valueindex() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.valueIndex)
  
  ::google::protobuf::Int32Value* temp = valueindex_;
  valueindex_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_valueindex(::google::protobuf::Int32Value* valueindex) {
  delete valueindex_;
  if (valueindex != NULL && valueindex->GetArena() != NULL) {
    ::google::protobuf::Int32Value* new_valueindex = new ::google::protobuf::Int32Value;
    new_valueindex->CopyFrom(*valueindex);
    valueindex = new_valueindex;
  }
  valueindex_ = valueindex;
  if (valueindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.valueIndex)
}

// repeated .tctrl.schema.ParamPartSpec part = 13;
inline int ParamSpec::part_size() const {
  return part_.size();
}
inline void ParamSpec::clear_part() {
  part_.Clear();
}
inline const ::tctrl::schema::ParamPartSpec& ParamSpec::part(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.part)
  return part_.Get(index);
}
inline ::tctrl::schema::ParamPartSpec* ParamSpec::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.part)
  return part_.Mutable(index);
}
inline ::tctrl::schema::ParamPartSpec* ParamSpec::add_part() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ParamSpec.part)
  return part_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamPartSpec >*
ParamSpec::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ParamSpec.part)
  return &part_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamPartSpec >&
ParamSpec::part() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ParamSpec.part)
  return part_;
}

// string style = 14;
inline void ParamSpec::clear_style() {
  style_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::style() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.style)
  return style_.GetNoArena();
}
inline void ParamSpec::set_style(const ::std::string& value) {
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.style)
}
#if LANG_CXX11
inline void ParamSpec::set_style(::std::string&& value) {
  
  style_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.style)
}
#endif
inline void ParamSpec::set_style(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.style)
}
inline void ParamSpec::set_style(const char* value, size_t size) {
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.style)
}
inline ::std::string* ParamSpec::mutable_style() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.style)
  return style_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_style() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.style)
  
  return style_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_style(::std::string* style) {
  if (style != NULL) {
    
  } else {
    
  }
  style_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), style);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.style)
}

// string group = 15;
inline void ParamSpec::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::group() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.group)
  return group_.GetNoArena();
}
inline void ParamSpec::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.group)
}
#if LANG_CXX11
inline void ParamSpec::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.group)
}
#endif
inline void ParamSpec::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.group)
}
inline void ParamSpec::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.group)
}
inline ::std::string* ParamSpec::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_group() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.group)
}

// repeated .tctrl.schema.ParamOption option = 16;
inline int ParamSpec::option_size() const {
  return option_.size();
}
inline void ParamSpec::clear_option() {
  option_.Clear();
}
inline const ::tctrl::schema::ParamOption& ParamSpec::option(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.option)
  return option_.Get(index);
}
inline ::tctrl::schema::ParamOption* ParamSpec::mutable_option(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.option)
  return option_.Mutable(index);
}
inline ::tctrl::schema::ParamOption* ParamSpec::add_option() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ParamSpec.option)
  return option_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >*
ParamSpec::mutable_option() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ParamSpec.option)
  return &option_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamOption >&
ParamSpec::option() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ParamSpec.option)
  return option_;
}

// string optionListKey = 17;
inline void ParamSpec::clear_optionlistkey() {
  optionlistkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::optionlistkey() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.optionListKey)
  return optionlistkey_.GetNoArena();
}
inline void ParamSpec::set_optionlistkey(const ::std::string& value) {
  
  optionlistkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.optionListKey)
}
#if LANG_CXX11
inline void ParamSpec::set_optionlistkey(::std::string&& value) {
  
  optionlistkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.optionListKey)
}
#endif
inline void ParamSpec::set_optionlistkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  optionlistkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.optionListKey)
}
inline void ParamSpec::set_optionlistkey(const char* value, size_t size) {
  
  optionlistkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.optionListKey)
}
inline ::std::string* ParamSpec::mutable_optionlistkey() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.optionListKey)
  return optionlistkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_optionlistkey() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.optionListKey)
  
  return optionlistkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_optionlistkey(::std::string* optionlistkey) {
  if (optionlistkey != NULL) {
    
  } else {
    
  }
  optionlistkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optionlistkey);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.optionListKey)
}

// repeated string tag = 18;
inline int ParamSpec::tag_size() const {
  return tag_.size();
}
inline void ParamSpec::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& ParamSpec::tag(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.tag)
  return tag_.Get(index);
}
inline ::std::string* ParamSpec::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.tag)
  return tag_.Mutable(index);
}
inline void ParamSpec::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParamSpec::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParamSpec::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.tag)
}
inline void ParamSpec::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.tag)
}
inline ::std::string* ParamSpec::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tctrl.schema.ParamSpec.tag)
  return tag_.Add();
}
inline void ParamSpec::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tctrl.schema.ParamSpec.tag)
}
#if LANG_CXX11
inline void ParamSpec::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tctrl.schema.ParamSpec.tag)
}
#endif
inline void ParamSpec::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tctrl.schema.ParamSpec.tag)
}
inline void ParamSpec::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tctrl.schema.ParamSpec.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamSpec::tag() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ParamSpec.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParamSpec::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ParamSpec.tag)
  return &tag_;
}

// string help = 19;
inline void ParamSpec::clear_help() {
  help_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::help() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.help)
  return help_.GetNoArena();
}
inline void ParamSpec::set_help(const ::std::string& value) {
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.help)
}
#if LANG_CXX11
inline void ParamSpec::set_help(::std::string&& value) {
  
  help_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.help)
}
#endif
inline void ParamSpec::set_help(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.help)
}
inline void ParamSpec::set_help(const char* value, size_t size) {
  
  help_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.help)
}
inline ::std::string* ParamSpec::mutable_help() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.help)
  return help_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_help() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.help)
  
  return help_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_help(::std::string* help) {
  if (help != NULL) {
    
  } else {
    
  }
  help_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), help);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.help)
}

// string offHelp = 20;
inline void ParamSpec::clear_offhelp() {
  offhelp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::offhelp() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.offHelp)
  return offhelp_.GetNoArena();
}
inline void ParamSpec::set_offhelp(const ::std::string& value) {
  
  offhelp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.offHelp)
}
#if LANG_CXX11
inline void ParamSpec::set_offhelp(::std::string&& value) {
  
  offhelp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.offHelp)
}
#endif
inline void ParamSpec::set_offhelp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  offhelp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.offHelp)
}
inline void ParamSpec::set_offhelp(const char* value, size_t size) {
  
  offhelp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.offHelp)
}
inline ::std::string* ParamSpec::mutable_offhelp() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.offHelp)
  return offhelp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_offhelp() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.offHelp)
  
  return offhelp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_offhelp(::std::string* offhelp) {
  if (offhelp != NULL) {
    
  } else {
    
  }
  offhelp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offhelp);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.offHelp)
}

// string buttonText = 21;
inline void ParamSpec::clear_buttontext() {
  buttontext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::buttontext() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.buttonText)
  return buttontext_.GetNoArena();
}
inline void ParamSpec::set_buttontext(const ::std::string& value) {
  
  buttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.buttonText)
}
#if LANG_CXX11
inline void ParamSpec::set_buttontext(::std::string&& value) {
  
  buttontext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.buttonText)
}
#endif
inline void ParamSpec::set_buttontext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.buttonText)
}
inline void ParamSpec::set_buttontext(const char* value, size_t size) {
  
  buttontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.buttonText)
}
inline ::std::string* ParamSpec::mutable_buttontext() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.buttonText)
  return buttontext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_buttontext() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.buttonText)
  
  return buttontext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_buttontext(::std::string* buttontext) {
  if (buttontext != NULL) {
    
  } else {
    
  }
  buttontext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttontext);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.buttonText)
}

// string buttonOffText = 22;
inline void ParamSpec::clear_buttonofftext() {
  buttonofftext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParamSpec::buttonofftext() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.buttonOffText)
  return buttonofftext_.GetNoArena();
}
inline void ParamSpec::set_buttonofftext(const ::std::string& value) {
  
  buttonofftext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ParamSpec.buttonOffText)
}
#if LANG_CXX11
inline void ParamSpec::set_buttonofftext(::std::string&& value) {
  
  buttonofftext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ParamSpec.buttonOffText)
}
#endif
inline void ParamSpec::set_buttonofftext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  buttonofftext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ParamSpec.buttonOffText)
}
inline void ParamSpec::set_buttonofftext(const char* value, size_t size) {
  
  buttonofftext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ParamSpec.buttonOffText)
}
inline ::std::string* ParamSpec::mutable_buttonofftext() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.buttonOffText)
  return buttonofftext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_buttonofftext() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.buttonOffText)
  
  return buttonofftext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_buttonofftext(::std::string* buttonofftext) {
  if (buttonofftext != NULL) {
    
  } else {
    
  }
  buttonofftext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttonofftext);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.buttonOffText)
}

// .google.protobuf.Struct properties = 1000;
inline bool ParamSpec::has_properties() const {
  return this != internal_default_instance() && properties_ != NULL;
}
inline void ParamSpec::clear_properties() {
  if (GetArenaNoVirtual() == NULL && properties_ != NULL) delete properties_;
  properties_ = NULL;
}
inline const ::google::protobuf::Struct& ParamSpec::properties() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ParamSpec.properties)
  return properties_ != NULL ? *properties_
                         : *::google::protobuf::Struct::internal_default_instance();
}
inline ::google::protobuf::Struct* ParamSpec::mutable_properties() {
  
  if (properties_ == NULL) {
    properties_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ParamSpec.properties)
  return properties_;
}
inline ::google::protobuf::Struct* ParamSpec::release_properties() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ParamSpec.properties)
  
  ::google::protobuf::Struct* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void ParamSpec::set_allocated_properties(::google::protobuf::Struct* properties) {
  delete properties_;
  if (properties != NULL && properties->GetArena() != NULL) {
    ::google::protobuf::Struct* new_properties = new ::google::protobuf::Struct;
    new_properties->CopyFrom(*properties);
    properties = new_properties;
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ParamSpec.properties)
}

// -------------------------------------------------------------------

// ModuleTypeSpec

// string key = 1;
inline void ModuleTypeSpec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleTypeSpec::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleTypeSpec.key)
  return key_.GetNoArena();
}
inline void ModuleTypeSpec::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleTypeSpec.key)
}
#if LANG_CXX11
inline void ModuleTypeSpec::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleTypeSpec.key)
}
#endif
inline void ModuleTypeSpec::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleTypeSpec.key)
}
inline void ModuleTypeSpec::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleTypeSpec.key)
}
inline ::std::string* ModuleTypeSpec::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleTypeSpec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleTypeSpec::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleTypeSpec.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleTypeSpec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleTypeSpec.key)
}

// string label = 2;
inline void ModuleTypeSpec::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleTypeSpec::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleTypeSpec.label)
  return label_.GetNoArena();
}
inline void ModuleTypeSpec::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleTypeSpec.label)
}
#if LANG_CXX11
inline void ModuleTypeSpec::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleTypeSpec.label)
}
#endif
inline void ModuleTypeSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleTypeSpec.label)
}
inline void ModuleTypeSpec::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleTypeSpec.label)
}
inline ::std::string* ModuleTypeSpec::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleTypeSpec.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleTypeSpec::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleTypeSpec.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleTypeSpec::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleTypeSpec.label)
}

// repeated .tctrl.schema.ParamSpec param = 7;
inline int ModuleTypeSpec::param_size() const {
  return param_.size();
}
inline void ModuleTypeSpec::clear_param() {
  param_.Clear();
}
inline const ::tctrl::schema::ParamSpec& ModuleTypeSpec::param(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleTypeSpec.param)
  return param_.Get(index);
}
inline ::tctrl::schema::ParamSpec* ModuleTypeSpec::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleTypeSpec.param)
  return param_.Mutable(index);
}
inline ::tctrl::schema::ParamSpec* ModuleTypeSpec::add_param() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleTypeSpec.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >*
ModuleTypeSpec::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleTypeSpec.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >&
ModuleTypeSpec::param() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleTypeSpec.param)
  return param_;
}

// repeated .tctrl.schema.GroupInfo paramGroup = 9;
inline int ModuleTypeSpec::paramgroup_size() const {
  return paramgroup_.size();
}
inline void ModuleTypeSpec::clear_paramgroup() {
  paramgroup_.Clear();
}
inline const ::tctrl::schema::GroupInfo& ModuleTypeSpec::paramgroup(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleTypeSpec.paramGroup)
  return paramgroup_.Get(index);
}
inline ::tctrl::schema::GroupInfo* ModuleTypeSpec::mutable_paramgroup(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleTypeSpec.paramGroup)
  return paramgroup_.Mutable(index);
}
inline ::tctrl::schema::GroupInfo* ModuleTypeSpec::add_paramgroup() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleTypeSpec.paramGroup)
  return paramgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
ModuleTypeSpec::mutable_paramgroup() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleTypeSpec.paramGroup)
  return &paramgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
ModuleTypeSpec::paramgroup() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleTypeSpec.paramGroup)
  return paramgroup_;
}

// -------------------------------------------------------------------

// ModuleSpec

// string key = 1;
inline void ModuleSpec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleSpec::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.key)
  return key_.GetNoArena();
}
inline void ModuleSpec::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.key)
}
#if LANG_CXX11
inline void ModuleSpec::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleSpec.key)
}
#endif
inline void ModuleSpec::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.key)
}
inline void ModuleSpec::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.key)
}
inline ::std::string* ModuleSpec::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleSpec::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleSpec.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSpec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleSpec.key)
}

// string label = 2;
inline void ModuleSpec::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleSpec::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.label)
  return label_.GetNoArena();
}
inline void ModuleSpec::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.label)
}
#if LANG_CXX11
inline void ModuleSpec::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleSpec.label)
}
#endif
inline void ModuleSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.label)
}
inline void ModuleSpec::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.label)
}
inline ::std::string* ModuleSpec::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleSpec::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleSpec.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSpec::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleSpec.label)
}

// string path = 3;
inline void ModuleSpec::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleSpec::path() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.path)
  return path_.GetNoArena();
}
inline void ModuleSpec::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.path)
}
#if LANG_CXX11
inline void ModuleSpec::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleSpec.path)
}
#endif
inline void ModuleSpec::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.path)
}
inline void ModuleSpec::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.path)
}
inline ::std::string* ModuleSpec::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleSpec::release_path() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleSpec.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSpec::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleSpec.path)
}

// string moduleType = 4;
inline void ModuleSpec::clear_moduletype() {
  moduletype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleSpec::moduletype() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.moduleType)
  return moduletype_.GetNoArena();
}
inline void ModuleSpec::set_moduletype(const ::std::string& value) {
  
  moduletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.moduleType)
}
#if LANG_CXX11
inline void ModuleSpec::set_moduletype(::std::string&& value) {
  
  moduletype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleSpec.moduleType)
}
#endif
inline void ModuleSpec::set_moduletype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moduletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.moduleType)
}
inline void ModuleSpec::set_moduletype(const char* value, size_t size) {
  
  moduletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.moduleType)
}
inline ::std::string* ModuleSpec::mutable_moduletype() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.moduleType)
  return moduletype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleSpec::release_moduletype() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleSpec.moduleType)
  
  return moduletype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSpec::set_allocated_moduletype(::std::string* moduletype) {
  if (moduletype != NULL) {
    
  } else {
    
  }
  moduletype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduletype);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleSpec.moduleType)
}

// string group = 5;
inline void ModuleSpec::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleSpec::group() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.group)
  return group_.GetNoArena();
}
inline void ModuleSpec::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.group)
}
#if LANG_CXX11
inline void ModuleSpec::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ModuleSpec.group)
}
#endif
inline void ModuleSpec::set_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.group)
}
inline void ModuleSpec::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.group)
}
inline ::std::string* ModuleSpec::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleSpec::release_group() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ModuleSpec.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleSpec::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ModuleSpec.group)
}

// repeated string tag = 6;
inline int ModuleSpec::tag_size() const {
  return tag_.size();
}
inline void ModuleSpec::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& ModuleSpec::tag(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.tag)
  return tag_.Get(index);
}
inline ::std::string* ModuleSpec::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.tag)
  return tag_.Mutable(index);
}
inline void ModuleSpec::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ModuleSpec::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.ModuleSpec.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ModuleSpec::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ModuleSpec.tag)
}
inline void ModuleSpec::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ModuleSpec.tag)
}
inline ::std::string* ModuleSpec::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tctrl.schema.ModuleSpec.tag)
  return tag_.Add();
}
inline void ModuleSpec::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.tag)
}
#if LANG_CXX11
inline void ModuleSpec::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.tag)
}
#endif
inline void ModuleSpec::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tctrl.schema.ModuleSpec.tag)
}
inline void ModuleSpec::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tctrl.schema.ModuleSpec.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModuleSpec::tag() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleSpec.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModuleSpec::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleSpec.tag)
  return &tag_;
}

// repeated .tctrl.schema.ParamSpec param = 7;
inline int ModuleSpec::param_size() const {
  return param_.size();
}
inline void ModuleSpec::clear_param() {
  param_.Clear();
}
inline const ::tctrl::schema::ParamSpec& ModuleSpec::param(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.param)
  return param_.Get(index);
}
inline ::tctrl::schema::ParamSpec* ModuleSpec::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.param)
  return param_.Mutable(index);
}
inline ::tctrl::schema::ParamSpec* ModuleSpec::add_param() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >*
ModuleSpec::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleSpec.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ParamSpec >&
ModuleSpec::param() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleSpec.param)
  return param_;
}

// repeated .tctrl.schema.ModuleSpec childModule = 8;
inline int ModuleSpec::childmodule_size() const {
  return childmodule_.size();
}
inline void ModuleSpec::clear_childmodule() {
  childmodule_.Clear();
}
inline const ::tctrl::schema::ModuleSpec& ModuleSpec::childmodule(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.childModule)
  return childmodule_.Get(index);
}
inline ::tctrl::schema::ModuleSpec* ModuleSpec::mutable_childmodule(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.childModule)
  return childmodule_.Mutable(index);
}
inline ::tctrl::schema::ModuleSpec* ModuleSpec::add_childmodule() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.childModule)
  return childmodule_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >*
ModuleSpec::mutable_childmodule() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleSpec.childModule)
  return &childmodule_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >&
ModuleSpec::childmodule() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleSpec.childModule)
  return childmodule_;
}

// repeated .tctrl.schema.GroupInfo paramGroup = 9;
inline int ModuleSpec::paramgroup_size() const {
  return paramgroup_.size();
}
inline void ModuleSpec::clear_paramgroup() {
  paramgroup_.Clear();
}
inline const ::tctrl::schema::GroupInfo& ModuleSpec::paramgroup(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.paramGroup)
  return paramgroup_.Get(index);
}
inline ::tctrl::schema::GroupInfo* ModuleSpec::mutable_paramgroup(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.paramGroup)
  return paramgroup_.Mutable(index);
}
inline ::tctrl::schema::GroupInfo* ModuleSpec::add_paramgroup() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.paramGroup)
  return paramgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
ModuleSpec::mutable_paramgroup() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleSpec.paramGroup)
  return &paramgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
ModuleSpec::paramgroup() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleSpec.paramGroup)
  return paramgroup_;
}

// repeated .tctrl.schema.GroupInfo childGroup = 10;
inline int ModuleSpec::childgroup_size() const {
  return childgroup_.size();
}
inline void ModuleSpec::clear_childgroup() {
  childgroup_.Clear();
}
inline const ::tctrl::schema::GroupInfo& ModuleSpec::childgroup(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ModuleSpec.childGroup)
  return childgroup_.Get(index);
}
inline ::tctrl::schema::GroupInfo* ModuleSpec::mutable_childgroup(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ModuleSpec.childGroup)
  return childgroup_.Mutable(index);
}
inline ::tctrl::schema::GroupInfo* ModuleSpec::add_childgroup() {
  // @@protoc_insertion_point(field_add:tctrl.schema.ModuleSpec.childGroup)
  return childgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
ModuleSpec::mutable_childgroup() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.ModuleSpec.childGroup)
  return &childgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
ModuleSpec::childgroup() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.ModuleSpec.childGroup)
  return childgroup_;
}

// -------------------------------------------------------------------

// ConnectionInfo

// string key = 1;
inline void ConnectionInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ConnectionInfo.key)
  return key_.GetNoArena();
}
inline void ConnectionInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ConnectionInfo.key)
}
#if LANG_CXX11
inline void ConnectionInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ConnectionInfo.key)
}
#endif
inline void ConnectionInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ConnectionInfo.key)
}
inline void ConnectionInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ConnectionInfo.key)
}
inline ::std::string* ConnectionInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ConnectionInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ConnectionInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ConnectionInfo.key)
}

// string label = 2;
inline void ConnectionInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ConnectionInfo.label)
  return label_.GetNoArena();
}
inline void ConnectionInfo::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ConnectionInfo.label)
}
#if LANG_CXX11
inline void ConnectionInfo::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ConnectionInfo.label)
}
#endif
inline void ConnectionInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ConnectionInfo.label)
}
inline void ConnectionInfo::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ConnectionInfo.label)
}
inline ::std::string* ConnectionInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ConnectionInfo.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ConnectionInfo.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ConnectionInfo.label)
}

// string type = 3;
inline void ConnectionInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::type() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ConnectionInfo.type)
  return type_.GetNoArena();
}
inline void ConnectionInfo::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ConnectionInfo.type)
}
#if LANG_CXX11
inline void ConnectionInfo::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ConnectionInfo.type)
}
#endif
inline void ConnectionInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ConnectionInfo.type)
}
inline void ConnectionInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ConnectionInfo.type)
}
inline ::std::string* ConnectionInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ConnectionInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_type() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ConnectionInfo.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ConnectionInfo.type)
}

// string host = 4;
inline void ConnectionInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionInfo::host() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ConnectionInfo.host)
  return host_.GetNoArena();
}
inline void ConnectionInfo::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.ConnectionInfo.host)
}
#if LANG_CXX11
inline void ConnectionInfo::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.ConnectionInfo.host)
}
#endif
inline void ConnectionInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.ConnectionInfo.host)
}
inline void ConnectionInfo::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.ConnectionInfo.host)
}
inline ::std::string* ConnectionInfo::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.ConnectionInfo.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionInfo::release_host() {
  // @@protoc_insertion_point(field_release:tctrl.schema.ConnectionInfo.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionInfo::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.ConnectionInfo.host)
}

// int32 port = 5;
inline void ConnectionInfo::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ConnectionInfo::port() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.ConnectionInfo.port)
  return port_;
}
inline void ConnectionInfo::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:tctrl.schema.ConnectionInfo.port)
}

// -------------------------------------------------------------------

// GroupInfo

// string key = 1;
inline void GroupInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.GroupInfo.key)
  return key_.GetNoArena();
}
inline void GroupInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.GroupInfo.key)
}
#if LANG_CXX11
inline void GroupInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.GroupInfo.key)
}
#endif
inline void GroupInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.GroupInfo.key)
}
inline void GroupInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.GroupInfo.key)
}
inline ::std::string* GroupInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.GroupInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.GroupInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.GroupInfo.key)
}

// string label = 2;
inline void GroupInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.GroupInfo.label)
  return label_.GetNoArena();
}
inline void GroupInfo::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.GroupInfo.label)
}
#if LANG_CXX11
inline void GroupInfo::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.GroupInfo.label)
}
#endif
inline void GroupInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.GroupInfo.label)
}
inline void GroupInfo::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.GroupInfo.label)
}
inline ::std::string* GroupInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.GroupInfo.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.GroupInfo.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.GroupInfo.label)
}

// repeated string tag = 3;
inline int GroupInfo::tag_size() const {
  return tag_.size();
}
inline void GroupInfo::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& GroupInfo::tag(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.GroupInfo.tag)
  return tag_.Get(index);
}
inline ::std::string* GroupInfo::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.GroupInfo.tag)
  return tag_.Mutable(index);
}
inline void GroupInfo::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.GroupInfo.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupInfo::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.GroupInfo.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupInfo::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tctrl.schema.GroupInfo.tag)
}
inline void GroupInfo::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.GroupInfo.tag)
}
inline ::std::string* GroupInfo::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tctrl.schema.GroupInfo.tag)
  return tag_.Add();
}
inline void GroupInfo::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tctrl.schema.GroupInfo.tag)
}
#if LANG_CXX11
inline void GroupInfo::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tctrl.schema.GroupInfo.tag)
}
#endif
inline void GroupInfo::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tctrl.schema.GroupInfo.tag)
}
inline void GroupInfo::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tctrl.schema.GroupInfo.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupInfo::tag() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.GroupInfo.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupInfo::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.GroupInfo.tag)
  return &tag_;
}

// -------------------------------------------------------------------

// AppSpec

// string key = 1;
inline void AppSpec::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppSpec::key() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.key)
  return key_.GetNoArena();
}
inline void AppSpec::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.key)
}
#if LANG_CXX11
inline void AppSpec::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.AppSpec.key)
}
#endif
inline void AppSpec::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.AppSpec.key)
}
inline void AppSpec::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.AppSpec.key)
}
inline ::std::string* AppSpec::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppSpec::release_key() {
  // @@protoc_insertion_point(field_release:tctrl.schema.AppSpec.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppSpec::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.AppSpec.key)
}

// string label = 2;
inline void AppSpec::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppSpec::label() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.label)
  return label_.GetNoArena();
}
inline void AppSpec::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.label)
}
#if LANG_CXX11
inline void AppSpec::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.AppSpec.label)
}
#endif
inline void AppSpec::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.AppSpec.label)
}
inline void AppSpec::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.AppSpec.label)
}
inline ::std::string* AppSpec::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppSpec::release_label() {
  // @@protoc_insertion_point(field_release:tctrl.schema.AppSpec.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppSpec::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.AppSpec.label)
}

// repeated string tag = 3;
inline int AppSpec::tag_size() const {
  return tag_.size();
}
inline void AppSpec::clear_tag() {
  tag_.Clear();
}
inline const ::std::string& AppSpec::tag(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.tag)
  return tag_.Get(index);
}
inline ::std::string* AppSpec::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.tag)
  return tag_.Mutable(index);
}
inline void AppSpec::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AppSpec::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AppSpec::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tctrl.schema.AppSpec.tag)
}
inline void AppSpec::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.AppSpec.tag)
}
inline ::std::string* AppSpec::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tctrl.schema.AppSpec.tag)
  return tag_.Add();
}
inline void AppSpec::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.tag)
}
#if LANG_CXX11
inline void AppSpec::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.tag)
}
#endif
inline void AppSpec::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tctrl.schema.AppSpec.tag)
}
inline void AppSpec::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tctrl.schema.AppSpec.tag)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppSpec::tag() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.tag)
  return tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppSpec::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.tag)
  return &tag_;
}

// string description = 4;
inline void AppSpec::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppSpec::description() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.description)
  return description_.GetNoArena();
}
inline void AppSpec::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.description)
}
#if LANG_CXX11
inline void AppSpec::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.AppSpec.description)
}
#endif
inline void AppSpec::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.AppSpec.description)
}
inline void AppSpec::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.AppSpec.description)
}
inline ::std::string* AppSpec::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppSpec::release_description() {
  // @@protoc_insertion_point(field_release:tctrl.schema.AppSpec.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppSpec::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.AppSpec.description)
}

// string path = 10;
inline void AppSpec::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppSpec::path() const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.path)
  return path_.GetNoArena();
}
inline void AppSpec::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tctrl.schema.AppSpec.path)
}
#if LANG_CXX11
inline void AppSpec::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tctrl.schema.AppSpec.path)
}
#endif
inline void AppSpec::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tctrl.schema.AppSpec.path)
}
inline void AppSpec::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tctrl.schema.AppSpec.path)
}
inline ::std::string* AppSpec::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppSpec::release_path() {
  // @@protoc_insertion_point(field_release:tctrl.schema.AppSpec.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppSpec::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:tctrl.schema.AppSpec.path)
}

// repeated .tctrl.schema.ModuleSpec childModule = 5;
inline int AppSpec::childmodule_size() const {
  return childmodule_.size();
}
inline void AppSpec::clear_childmodule() {
  childmodule_.Clear();
}
inline const ::tctrl::schema::ModuleSpec& AppSpec::childmodule(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.childModule)
  return childmodule_.Get(index);
}
inline ::tctrl::schema::ModuleSpec* AppSpec::mutable_childmodule(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.childModule)
  return childmodule_.Mutable(index);
}
inline ::tctrl::schema::ModuleSpec* AppSpec::add_childmodule() {
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.childModule)
  return childmodule_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >*
AppSpec::mutable_childmodule() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.childModule)
  return &childmodule_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleSpec >&
AppSpec::childmodule() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.childModule)
  return childmodule_;
}

// repeated .tctrl.schema.GroupInfo childGroup = 6;
inline int AppSpec::childgroup_size() const {
  return childgroup_.size();
}
inline void AppSpec::clear_childgroup() {
  childgroup_.Clear();
}
inline const ::tctrl::schema::GroupInfo& AppSpec::childgroup(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.childGroup)
  return childgroup_.Get(index);
}
inline ::tctrl::schema::GroupInfo* AppSpec::mutable_childgroup(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.childGroup)
  return childgroup_.Mutable(index);
}
inline ::tctrl::schema::GroupInfo* AppSpec::add_childgroup() {
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.childGroup)
  return childgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >*
AppSpec::mutable_childgroup() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.childGroup)
  return &childgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::GroupInfo >&
AppSpec::childgroup() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.childGroup)
  return childgroup_;
}

// repeated .tctrl.schema.OptionList optionList = 7;
inline int AppSpec::optionlist_size() const {
  return optionlist_.size();
}
inline void AppSpec::clear_optionlist() {
  optionlist_.Clear();
}
inline const ::tctrl::schema::OptionList& AppSpec::optionlist(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.optionList)
  return optionlist_.Get(index);
}
inline ::tctrl::schema::OptionList* AppSpec::mutable_optionlist(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.optionList)
  return optionlist_.Mutable(index);
}
inline ::tctrl::schema::OptionList* AppSpec::add_optionlist() {
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.optionList)
  return optionlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::OptionList >*
AppSpec::mutable_optionlist() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.optionList)
  return &optionlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::OptionList >&
AppSpec::optionlist() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.optionList)
  return optionlist_;
}

// repeated .tctrl.schema.ConnectionInfo connection = 8;
inline int AppSpec::connection_size() const {
  return connection_.size();
}
inline void AppSpec::clear_connection() {
  connection_.Clear();
}
inline const ::tctrl::schema::ConnectionInfo& AppSpec::connection(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.connection)
  return connection_.Get(index);
}
inline ::tctrl::schema::ConnectionInfo* AppSpec::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.connection)
  return connection_.Mutable(index);
}
inline ::tctrl::schema::ConnectionInfo* AppSpec::add_connection() {
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.connection)
  return connection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ConnectionInfo >*
AppSpec::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.connection)
  return &connection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ConnectionInfo >&
AppSpec::connection() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.connection)
  return connection_;
}

// repeated .tctrl.schema.ModuleTypeSpec moduleType = 9;
inline int AppSpec::moduletype_size() const {
  return moduletype_.size();
}
inline void AppSpec::clear_moduletype() {
  moduletype_.Clear();
}
inline const ::tctrl::schema::ModuleTypeSpec& AppSpec::moduletype(int index) const {
  // @@protoc_insertion_point(field_get:tctrl.schema.AppSpec.moduleType)
  return moduletype_.Get(index);
}
inline ::tctrl::schema::ModuleTypeSpec* AppSpec::mutable_moduletype(int index) {
  // @@protoc_insertion_point(field_mutable:tctrl.schema.AppSpec.moduleType)
  return moduletype_.Mutable(index);
}
inline ::tctrl::schema::ModuleTypeSpec* AppSpec::add_moduletype() {
  // @@protoc_insertion_point(field_add:tctrl.schema.AppSpec.moduleType)
  return moduletype_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleTypeSpec >*
AppSpec::mutable_moduletype() {
  // @@protoc_insertion_point(field_mutable_list:tctrl.schema.AppSpec.moduleType)
  return &moduletype_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tctrl::schema::ModuleTypeSpec >&
AppSpec::moduletype() const {
  // @@protoc_insertion_point(field_list:tctrl.schema.AppSpec.moduleType)
  return moduletype_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace schema
}  // namespace tctrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tctrl::schema::ParamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tctrl::schema::ParamType>() {
  return ::tctrl::schema::ParamType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tctrl_2dschema_2eproto__INCLUDED

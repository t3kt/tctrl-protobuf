// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tctrl-schema.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tctrl.Schema {

  /// <summary>Holder for reflection information generated from tctrl-schema.proto</summary>
  public static partial class TctrlSchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for tctrl-schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TctrlSchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ0Y3RybC1zY2hlbWEucHJvdG8SDHRjdHJsLnNjaGVtYRocZ29vZ2xlL3By",
            "b3RvYnVmL3N0cnVjdC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJz",
            "LnByb3RvIikKC1BhcmFtT3B0aW9uEgsKA2tleRgBIAEoCRINCgVsYWJlbBgC",
            "IAEoCSJTCgpPcHRpb25MaXN0EgsKA2tleRgBIAEoCRINCgVsYWJlbBgCIAEo",
            "CRIpCgZvcHRpb24YAyADKAsyGS50Y3RybC5zY2hlbWEuUGFyYW1PcHRpb24i",
            "sgIKDVBhcmFtUGFydFNwZWMSCwoDa2V5GAEgASgJEg0KBWxhYmVsGAIgASgJ",
            "EgwKBHBhdGgYCSABKAkSKAoIbWluTGltaXQYAyABKAsyFi5nb29nbGUucHJv",
            "dG9idWYuVmFsdWUSKAoIbWF4TGltaXQYBCABKAsyFi5nb29nbGUucHJvdG9i",
            "dWYuVmFsdWUSJwoHbWluTm9ybRgFIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5W",
            "YWx1ZRInCgdtYXhOb3JtGAYgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVl",
            "EioKCmRlZmF1bHRWYWwYByABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUS",
            "JQoFdmFsdWUYCCABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUiqQUKCVBh",
            "cmFtU3BlYxILCgNrZXkYASABKAkSDQoFbGFiZWwYAiABKAkSJQoEdHlwZRgD",
            "IAEoDjIXLnRjdHJsLnNjaGVtYS5QYXJhbVR5cGUSDAoEcGF0aBgEIAEoCRIR",
            "CglvdGhlclR5cGUYBSABKAkSKAoIbWluTGltaXQYBiABKAsyFi5nb29nbGUu",
            "cHJvdG9idWYuVmFsdWUSKAoIbWF4TGltaXQYByABKAsyFi5nb29nbGUucHJv",
            "dG9idWYuVmFsdWUSJwoHbWluTm9ybRgIIAEoCzIWLmdvb2dsZS5wcm90b2J1",
            "Zi5WYWx1ZRInCgdtYXhOb3JtGAkgASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZh",
            "bHVlEioKCmRlZmF1bHRWYWwYCiABKAsyFi5nb29nbGUucHJvdG9idWYuVmFs",
            "dWUSJQoFdmFsdWUYCyABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWUSLwoK",
            "dmFsdWVJbmRleBgMIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVl",
            "EikKBHBhcnQYDSADKAsyGy50Y3RybC5zY2hlbWEuUGFyYW1QYXJ0U3BlYxIN",
            "CgVzdHlsZRgOIAEoCRINCgVncm91cBgPIAEoCRIpCgZvcHRpb24YECADKAsy",
            "GS50Y3RybC5zY2hlbWEuUGFyYW1PcHRpb24SFQoNb3B0aW9uTGlzdEtleRgR",
            "IAEoCRILCgN0YWcYEiADKAkSDAoEaGVscBgTIAEoCRIPCgdvZmZIZWxwGBQg",
            "ASgJEhIKCmJ1dHRvblRleHQYFSABKAkSFQoNYnV0dG9uT2ZmVGV4dBgWIAEo",
            "CRIsCgpwcm9wZXJ0aWVzGOgHIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1",
            "Y3QigQEKDk1vZHVsZVR5cGVTcGVjEgsKA2tleRgBIAEoCRINCgVsYWJlbBgC",
            "IAEoCRImCgVwYXJhbRgHIAMoCzIXLnRjdHJsLnNjaGVtYS5QYXJhbVNwZWMS",
            "KwoKcGFyYW1Hcm91cBgJIAMoCzIXLnRjdHJsLnNjaGVtYS5Hcm91cEluZm8i",
            "lwIKCk1vZHVsZVNwZWMSCwoDa2V5GAEgASgJEg0KBWxhYmVsGAIgASgJEgwK",
            "BHBhdGgYAyABKAkSEgoKbW9kdWxlVHlwZRgEIAEoCRINCgVncm91cBgFIAEo",
            "CRILCgN0YWcYBiADKAkSJgoFcGFyYW0YByADKAsyFy50Y3RybC5zY2hlbWEu",
            "UGFyYW1TcGVjEi0KC2NoaWxkTW9kdWxlGAggAygLMhgudGN0cmwuc2NoZW1h",
            "Lk1vZHVsZVNwZWMSKwoKcGFyYW1Hcm91cBgJIAMoCzIXLnRjdHJsLnNjaGVt",
            "YS5Hcm91cEluZm8SKwoKY2hpbGRHcm91cBgKIAMoCzIXLnRjdHJsLnNjaGVt",
            "YS5Hcm91cEluZm8iVgoOQ29ubmVjdGlvbkluZm8SCwoDa2V5GAEgASgJEg0K",
            "BWxhYmVsGAIgASgJEgwKBHR5cGUYAyABKAkSDAoEaG9zdBgEIAEoCRIMCgRw",
            "b3J0GAUgASgFIjQKCUdyb3VwSW5mbxILCgNrZXkYASABKAkSDQoFbGFiZWwY",
            "AiABKAkSCwoDdGFnGAMgAygJIsMCCgdBcHBTcGVjEgsKA2tleRgBIAEoCRIN",
            "CgVsYWJlbBgCIAEoCRILCgN0YWcYAyADKAkSEwoLZGVzY3JpcHRpb24YBCAB",
            "KAkSDAoEcGF0aBgKIAEoCRItCgtjaGlsZE1vZHVsZRgFIAMoCzIYLnRjdHJs",
            "LnNjaGVtYS5Nb2R1bGVTcGVjEisKCmNoaWxkR3JvdXAYBiADKAsyFy50Y3Ry",
            "bC5zY2hlbWEuR3JvdXBJbmZvEiwKCm9wdGlvbkxpc3QYByADKAsyGC50Y3Ry",
            "bC5zY2hlbWEuT3B0aW9uTGlzdBIwCgpjb25uZWN0aW9uGAggAygLMhwudGN0",
            "cmwuc2NoZW1hLkNvbm5lY3Rpb25JbmZvEjAKCm1vZHVsZVR5cGUYCSADKAsy",
            "HC50Y3RybC5zY2hlbWEuTW9kdWxlVHlwZVNwZWMqawoJUGFyYW1UeXBlEgkK",
            "BU9USEVSEAASCAoEQk9PTBADEgoKBlNUUklORxAEEgcKA0lOVBAFEgkKBUZM",
            "T0FUEAYSCAoESVZFQxAHEggKBEZWRUMQCBIICgRNRU5VEAoSCwoHVFJJR0dF",
            "UhALQikKFW5ldC50M2t0LnRjdHJsLnNjaGVtYUIQVGN0cmxTY2hlbWFQcm90",
            "b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tctrl.Schema.ParamType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ParamOption), global::Tctrl.Schema.ParamOption.Parser, new[]{ "Key", "Label" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.OptionList), global::Tctrl.Schema.OptionList.Parser, new[]{ "Key", "Label", "Option" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ParamPartSpec), global::Tctrl.Schema.ParamPartSpec.Parser, new[]{ "Key", "Label", "Path", "MinLimit", "MaxLimit", "MinNorm", "MaxNorm", "DefaultVal", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ParamSpec), global::Tctrl.Schema.ParamSpec.Parser, new[]{ "Key", "Label", "Type", "Path", "OtherType", "MinLimit", "MaxLimit", "MinNorm", "MaxNorm", "DefaultVal", "Value", "ValueIndex", "Part", "Style", "Group", "Option", "OptionListKey", "Tag", "Help", "OffHelp", "ButtonText", "ButtonOffText", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ModuleTypeSpec), global::Tctrl.Schema.ModuleTypeSpec.Parser, new[]{ "Key", "Label", "Param", "ParamGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ModuleSpec), global::Tctrl.Schema.ModuleSpec.Parser, new[]{ "Key", "Label", "Path", "ModuleType", "Group", "Tag", "Param", "ChildModule", "ParamGroup", "ChildGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.ConnectionInfo), global::Tctrl.Schema.ConnectionInfo.Parser, new[]{ "Key", "Label", "Type", "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.GroupInfo), global::Tctrl.Schema.GroupInfo.Parser, new[]{ "Key", "Label", "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tctrl.Schema.AppSpec), global::Tctrl.Schema.AppSpec.Parser, new[]{ "Key", "Label", "Tag", "Description", "Path", "ChildModule", "ChildGroup", "OptionList", "Connection", "ModuleType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ParamType {
    [pbr::OriginalName("OTHER")] Other = 0,
    [pbr::OriginalName("BOOL")] Bool = 3,
    [pbr::OriginalName("STRING")] String = 4,
    [pbr::OriginalName("INT")] Int = 5,
    [pbr::OriginalName("FLOAT")] Float = 6,
    [pbr::OriginalName("IVEC")] Ivec = 7,
    [pbr::OriginalName("FVEC")] Fvec = 8,
    [pbr::OriginalName("MENU")] Menu = 10,
    [pbr::OriginalName("TRIGGER")] Trigger = 11,
  }

  #endregion

  #region Messages
  public sealed partial class ParamOption : pb::IMessage<ParamOption> {
    private static readonly pb::MessageParser<ParamOption> _parser = new pb::MessageParser<ParamOption>(() => new ParamOption());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOption(ParamOption other) : this() {
      key_ = other.key_;
      label_ = other.label_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamOption Clone() {
      return new ParamOption(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamOption other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptionList : pb::IMessage<OptionList> {
    private static readonly pb::MessageParser<OptionList> _parser = new pb::MessageParser<OptionList>(() => new OptionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionList(OptionList other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      option_ = other.option_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionList Clone() {
      return new OptionList(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ParamOption> _repeated_option_codec
        = pb::FieldCodec.ForMessage(26, global::Tctrl.Schema.ParamOption.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ParamOption> option_ = new pbc::RepeatedField<global::Tctrl.Schema.ParamOption>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ParamOption> Option {
      get { return option_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if(!option_.Equals(other.option_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= option_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      option_.WriteTo(output, _repeated_option_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += option_.CalculateSize(_repeated_option_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionList other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      option_.Add(other.option_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            option_.AddEntriesFrom(input, _repeated_option_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParamPartSpec : pb::IMessage<ParamPartSpec> {
    private static readonly pb::MessageParser<ParamPartSpec> _parser = new pb::MessageParser<ParamPartSpec>(() => new ParamPartSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamPartSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamPartSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamPartSpec(ParamPartSpec other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      path_ = other.path_;
      MinLimit = other.minLimit_ != null ? other.MinLimit.Clone() : null;
      MaxLimit = other.maxLimit_ != null ? other.MaxLimit.Clone() : null;
      MinNorm = other.minNorm_ != null ? other.MinNorm.Clone() : null;
      MaxNorm = other.maxNorm_ != null ? other.MaxNorm.Clone() : null;
      DefaultVal = other.defaultVal_ != null ? other.DefaultVal.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamPartSpec Clone() {
      return new ParamPartSpec(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 9;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minLimit" field.</summary>
    public const int MinLimitFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Value minLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MinLimit {
      get { return minLimit_; }
      set {
        minLimit_ = value;
      }
    }

    /// <summary>Field number for the "maxLimit" field.</summary>
    public const int MaxLimitFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Value maxLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MaxLimit {
      get { return maxLimit_; }
      set {
        maxLimit_ = value;
      }
    }

    /// <summary>Field number for the "minNorm" field.</summary>
    public const int MinNormFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Value minNorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MinNorm {
      get { return minNorm_; }
      set {
        minNorm_ = value;
      }
    }

    /// <summary>Field number for the "maxNorm" field.</summary>
    public const int MaxNormFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Value maxNorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MaxNorm {
      get { return maxNorm_; }
      set {
        maxNorm_ = value;
      }
    }

    /// <summary>Field number for the "defaultVal" field.</summary>
    public const int DefaultValFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Value defaultVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value DefaultVal {
      get { return defaultVal_; }
      set {
        defaultVal_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Value value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamPartSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamPartSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if (Path != other.Path) return false;
      if (!object.Equals(MinLimit, other.MinLimit)) return false;
      if (!object.Equals(MaxLimit, other.MaxLimit)) return false;
      if (!object.Equals(MinNorm, other.MinNorm)) return false;
      if (!object.Equals(MaxNorm, other.MaxNorm)) return false;
      if (!object.Equals(DefaultVal, other.DefaultVal)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (minLimit_ != null) hash ^= MinLimit.GetHashCode();
      if (maxLimit_ != null) hash ^= MaxLimit.GetHashCode();
      if (minNorm_ != null) hash ^= MinNorm.GetHashCode();
      if (maxNorm_ != null) hash ^= MaxNorm.GetHashCode();
      if (defaultVal_ != null) hash ^= DefaultVal.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (minLimit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinLimit);
      }
      if (maxLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MaxLimit);
      }
      if (minNorm_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MinNorm);
      }
      if (maxNorm_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MaxNorm);
      }
      if (defaultVal_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DefaultVal);
      }
      if (value_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Value);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (minLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinLimit);
      }
      if (maxLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxLimit);
      }
      if (minNorm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinNorm);
      }
      if (maxNorm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxNorm);
      }
      if (defaultVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultVal);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamPartSpec other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.minLimit_ != null) {
        if (minLimit_ == null) {
          minLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MinLimit.MergeFrom(other.MinLimit);
      }
      if (other.maxLimit_ != null) {
        if (maxLimit_ == null) {
          maxLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MaxLimit.MergeFrom(other.MaxLimit);
      }
      if (other.minNorm_ != null) {
        if (minNorm_ == null) {
          minNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MinNorm.MergeFrom(other.MinNorm);
      }
      if (other.maxNorm_ != null) {
        if (maxNorm_ == null) {
          maxNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MaxNorm.MergeFrom(other.MaxNorm);
      }
      if (other.defaultVal_ != null) {
        if (defaultVal_ == null) {
          defaultVal_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        DefaultVal.MergeFrom(other.DefaultVal);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            if (minLimit_ == null) {
              minLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(minLimit_);
            break;
          }
          case 34: {
            if (maxLimit_ == null) {
              maxLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(maxLimit_);
            break;
          }
          case 42: {
            if (minNorm_ == null) {
              minNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(minNorm_);
            break;
          }
          case 50: {
            if (maxNorm_ == null) {
              maxNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(maxNorm_);
            break;
          }
          case 58: {
            if (defaultVal_ == null) {
              defaultVal_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(defaultVal_);
            break;
          }
          case 66: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(value_);
            break;
          }
          case 74: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParamSpec : pb::IMessage<ParamSpec> {
    private static readonly pb::MessageParser<ParamSpec> _parser = new pb::MessageParser<ParamSpec>(() => new ParamSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec(ParamSpec other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      type_ = other.type_;
      path_ = other.path_;
      otherType_ = other.otherType_;
      MinLimit = other.minLimit_ != null ? other.MinLimit.Clone() : null;
      MaxLimit = other.maxLimit_ != null ? other.MaxLimit.Clone() : null;
      MinNorm = other.minNorm_ != null ? other.MinNorm.Clone() : null;
      MaxNorm = other.maxNorm_ != null ? other.MaxNorm.Clone() : null;
      DefaultVal = other.defaultVal_ != null ? other.DefaultVal.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
      ValueIndex = other.ValueIndex;
      part_ = other.part_.Clone();
      style_ = other.style_;
      group_ = other.group_;
      option_ = other.option_.Clone();
      optionListKey_ = other.optionListKey_;
      tag_ = other.tag_.Clone();
      help_ = other.help_;
      offHelp_ = other.offHelp_;
      buttonText_ = other.buttonText_;
      buttonOffText_ = other.buttonOffText_;
      Properties = other.properties_ != null ? other.Properties.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec Clone() {
      return new ParamSpec(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Tctrl.Schema.ParamType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tctrl.Schema.ParamType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otherType" field.</summary>
    public const int OtherTypeFieldNumber = 5;
    private string otherType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OtherType {
      get { return otherType_; }
      set {
        otherType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minLimit" field.</summary>
    public const int MinLimitFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Value minLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MinLimit {
      get { return minLimit_; }
      set {
        minLimit_ = value;
      }
    }

    /// <summary>Field number for the "maxLimit" field.</summary>
    public const int MaxLimitFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Value maxLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MaxLimit {
      get { return maxLimit_; }
      set {
        maxLimit_ = value;
      }
    }

    /// <summary>Field number for the "minNorm" field.</summary>
    public const int MinNormFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Value minNorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MinNorm {
      get { return minNorm_; }
      set {
        minNorm_ = value;
      }
    }

    /// <summary>Field number for the "maxNorm" field.</summary>
    public const int MaxNormFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Value maxNorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value MaxNorm {
      get { return maxNorm_; }
      set {
        maxNorm_ = value;
      }
    }

    /// <summary>Field number for the "defaultVal" field.</summary>
    public const int DefaultValFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Value defaultVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value DefaultVal {
      get { return defaultVal_; }
      set {
        defaultVal_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Value value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "valueIndex" field.</summary>
    public const int ValueIndexFieldNumber = 12;
    private static readonly pb::FieldCodec<int?> _single_valueIndex_codec = pb::FieldCodec.ForStructWrapper<int>(98);
    private int? valueIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? ValueIndex {
      get { return valueIndex_; }
      set {
        valueIndex_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ParamPartSpec> _repeated_part_codec
        = pb::FieldCodec.ForMessage(106, global::Tctrl.Schema.ParamPartSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ParamPartSpec> part_ = new pbc::RepeatedField<global::Tctrl.Schema.ParamPartSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ParamPartSpec> Part {
      get { return part_; }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 14;
    private string style_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Style {
      get { return style_; }
      set {
        style_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 15;
    private string group_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Group {
      get { return group_; }
      set {
        group_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ParamOption> _repeated_option_codec
        = pb::FieldCodec.ForMessage(130, global::Tctrl.Schema.ParamOption.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ParamOption> option_ = new pbc::RepeatedField<global::Tctrl.Schema.ParamOption>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ParamOption> Option {
      get { return option_; }
    }

    /// <summary>Field number for the "optionListKey" field.</summary>
    public const int OptionListKeyFieldNumber = 17;
    private string optionListKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OptionListKey {
      get { return optionListKey_; }
      set {
        optionListKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "help" field.</summary>
    public const int HelpFieldNumber = 19;
    private string help_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Help {
      get { return help_; }
      set {
        help_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offHelp" field.</summary>
    public const int OffHelpFieldNumber = 20;
    private string offHelp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OffHelp {
      get { return offHelp_; }
      set {
        offHelp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buttonText" field.</summary>
    public const int ButtonTextFieldNumber = 21;
    private string buttonText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ButtonText {
      get { return buttonText_; }
      set {
        buttonText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buttonOffText" field.</summary>
    public const int ButtonOffTextFieldNumber = 22;
    private string buttonOffText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ButtonOffText {
      get { return buttonOffText_; }
      set {
        buttonOffText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 1000;
    private global::Google.Protobuf.WellKnownTypes.Struct properties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if (Type != other.Type) return false;
      if (Path != other.Path) return false;
      if (OtherType != other.OtherType) return false;
      if (!object.Equals(MinLimit, other.MinLimit)) return false;
      if (!object.Equals(MaxLimit, other.MaxLimit)) return false;
      if (!object.Equals(MinNorm, other.MinNorm)) return false;
      if (!object.Equals(MaxNorm, other.MaxNorm)) return false;
      if (!object.Equals(DefaultVal, other.DefaultVal)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (ValueIndex != other.ValueIndex) return false;
      if(!part_.Equals(other.part_)) return false;
      if (Style != other.Style) return false;
      if (Group != other.Group) return false;
      if(!option_.Equals(other.option_)) return false;
      if (OptionListKey != other.OptionListKey) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if (Help != other.Help) return false;
      if (OffHelp != other.OffHelp) return false;
      if (ButtonText != other.ButtonText) return false;
      if (ButtonOffText != other.ButtonOffText) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (OtherType.Length != 0) hash ^= OtherType.GetHashCode();
      if (minLimit_ != null) hash ^= MinLimit.GetHashCode();
      if (maxLimit_ != null) hash ^= MaxLimit.GetHashCode();
      if (minNorm_ != null) hash ^= MinNorm.GetHashCode();
      if (maxNorm_ != null) hash ^= MaxNorm.GetHashCode();
      if (defaultVal_ != null) hash ^= DefaultVal.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (valueIndex_ != null) hash ^= ValueIndex.GetHashCode();
      hash ^= part_.GetHashCode();
      if (Style.Length != 0) hash ^= Style.GetHashCode();
      if (Group.Length != 0) hash ^= Group.GetHashCode();
      hash ^= option_.GetHashCode();
      if (OptionListKey.Length != 0) hash ^= OptionListKey.GetHashCode();
      hash ^= tag_.GetHashCode();
      if (Help.Length != 0) hash ^= Help.GetHashCode();
      if (OffHelp.Length != 0) hash ^= OffHelp.GetHashCode();
      if (ButtonText.Length != 0) hash ^= ButtonText.GetHashCode();
      if (ButtonOffText.Length != 0) hash ^= ButtonOffText.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Path);
      }
      if (OtherType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OtherType);
      }
      if (minLimit_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MinLimit);
      }
      if (maxLimit_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MaxLimit);
      }
      if (minNorm_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MinNorm);
      }
      if (maxNorm_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaxNorm);
      }
      if (defaultVal_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DefaultVal);
      }
      if (value_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Value);
      }
      if (valueIndex_ != null) {
        _single_valueIndex_codec.WriteTagAndValue(output, ValueIndex);
      }
      part_.WriteTo(output, _repeated_part_codec);
      if (Style.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Style);
      }
      if (Group.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Group);
      }
      option_.WriteTo(output, _repeated_option_codec);
      if (OptionListKey.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(OptionListKey);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      if (Help.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Help);
      }
      if (OffHelp.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(OffHelp);
      }
      if (ButtonText.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ButtonText);
      }
      if (ButtonOffText.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ButtonOffText);
      }
      if (properties_ != null) {
        output.WriteRawTag(194, 62);
        output.WriteMessage(Properties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (OtherType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherType);
      }
      if (minLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinLimit);
      }
      if (maxLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxLimit);
      }
      if (minNorm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinNorm);
      }
      if (maxNorm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxNorm);
      }
      if (defaultVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultVal);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (valueIndex_ != null) {
        size += _single_valueIndex_codec.CalculateSizeWithTag(ValueIndex);
      }
      size += part_.CalculateSize(_repeated_part_codec);
      if (Style.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Style);
      }
      if (Group.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Group);
      }
      size += option_.CalculateSize(_repeated_option_codec);
      if (OptionListKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OptionListKey);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      if (Help.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Help);
      }
      if (OffHelp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OffHelp);
      }
      if (ButtonText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ButtonText);
      }
      if (ButtonOffText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ButtonOffText);
      }
      if (properties_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamSpec other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.OtherType.Length != 0) {
        OtherType = other.OtherType;
      }
      if (other.minLimit_ != null) {
        if (minLimit_ == null) {
          minLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MinLimit.MergeFrom(other.MinLimit);
      }
      if (other.maxLimit_ != null) {
        if (maxLimit_ == null) {
          maxLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MaxLimit.MergeFrom(other.MaxLimit);
      }
      if (other.minNorm_ != null) {
        if (minNorm_ == null) {
          minNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MinNorm.MergeFrom(other.MinNorm);
      }
      if (other.maxNorm_ != null) {
        if (maxNorm_ == null) {
          maxNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        MaxNorm.MergeFrom(other.MaxNorm);
      }
      if (other.defaultVal_ != null) {
        if (defaultVal_ == null) {
          defaultVal_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        DefaultVal.MergeFrom(other.DefaultVal);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.valueIndex_ != null) {
        if (valueIndex_ == null || other.ValueIndex != 0) {
          ValueIndex = other.ValueIndex;
        }
      }
      part_.Add(other.part_);
      if (other.Style.Length != 0) {
        Style = other.Style;
      }
      if (other.Group.Length != 0) {
        Group = other.Group;
      }
      option_.Add(other.option_);
      if (other.OptionListKey.Length != 0) {
        OptionListKey = other.OptionListKey;
      }
      tag_.Add(other.tag_);
      if (other.Help.Length != 0) {
        Help = other.Help;
      }
      if (other.OffHelp.Length != 0) {
        OffHelp = other.OffHelp;
      }
      if (other.ButtonText.Length != 0) {
        ButtonText = other.ButtonText;
      }
      if (other.ButtonOffText.Length != 0) {
        ButtonOffText = other.ButtonOffText;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          properties_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Properties.MergeFrom(other.Properties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::Tctrl.Schema.ParamType) input.ReadEnum();
            break;
          }
          case 34: {
            Path = input.ReadString();
            break;
          }
          case 42: {
            OtherType = input.ReadString();
            break;
          }
          case 50: {
            if (minLimit_ == null) {
              minLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(minLimit_);
            break;
          }
          case 58: {
            if (maxLimit_ == null) {
              maxLimit_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(maxLimit_);
            break;
          }
          case 66: {
            if (minNorm_ == null) {
              minNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(minNorm_);
            break;
          }
          case 74: {
            if (maxNorm_ == null) {
              maxNorm_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(maxNorm_);
            break;
          }
          case 82: {
            if (defaultVal_ == null) {
              defaultVal_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(defaultVal_);
            break;
          }
          case 90: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(value_);
            break;
          }
          case 98: {
            int? value = _single_valueIndex_codec.Read(input);
            if (valueIndex_ == null || value != 0) {
              ValueIndex = value;
            }
            break;
          }
          case 106: {
            part_.AddEntriesFrom(input, _repeated_part_codec);
            break;
          }
          case 114: {
            Style = input.ReadString();
            break;
          }
          case 122: {
            Group = input.ReadString();
            break;
          }
          case 130: {
            option_.AddEntriesFrom(input, _repeated_option_codec);
            break;
          }
          case 138: {
            OptionListKey = input.ReadString();
            break;
          }
          case 146: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 154: {
            Help = input.ReadString();
            break;
          }
          case 162: {
            OffHelp = input.ReadString();
            break;
          }
          case 170: {
            ButtonText = input.ReadString();
            break;
          }
          case 178: {
            ButtonOffText = input.ReadString();
            break;
          }
          case 8002: {
            if (properties_ == null) {
              properties_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(properties_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModuleTypeSpec : pb::IMessage<ModuleTypeSpec> {
    private static readonly pb::MessageParser<ModuleTypeSpec> _parser = new pb::MessageParser<ModuleTypeSpec>(() => new ModuleTypeSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleTypeSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleTypeSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleTypeSpec(ModuleTypeSpec other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      param_ = other.param_.Clone();
      paramGroup_ = other.paramGroup_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleTypeSpec Clone() {
      return new ModuleTypeSpec(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ParamSpec> _repeated_param_codec
        = pb::FieldCodec.ForMessage(58, global::Tctrl.Schema.ParamSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ParamSpec> param_ = new pbc::RepeatedField<global::Tctrl.Schema.ParamSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ParamSpec> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "paramGroup" field.</summary>
    public const int ParamGroupFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.GroupInfo> _repeated_paramGroup_codec
        = pb::FieldCodec.ForMessage(74, global::Tctrl.Schema.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> paramGroup_ = new pbc::RepeatedField<global::Tctrl.Schema.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> ParamGroup {
      get { return paramGroup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleTypeSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleTypeSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!paramGroup_.Equals(other.paramGroup_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= paramGroup_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      param_.WriteTo(output, _repeated_param_codec);
      paramGroup_.WriteTo(output, _repeated_paramGroup_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += param_.CalculateSize(_repeated_param_codec);
      size += paramGroup_.CalculateSize(_repeated_paramGroup_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleTypeSpec other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      param_.Add(other.param_);
      paramGroup_.Add(other.paramGroup_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 58: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 74: {
            paramGroup_.AddEntriesFrom(input, _repeated_paramGroup_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModuleSpec : pb::IMessage<ModuleSpec> {
    private static readonly pb::MessageParser<ModuleSpec> _parser = new pb::MessageParser<ModuleSpec>(() => new ModuleSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModuleSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleSpec(ModuleSpec other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      path_ = other.path_;
      moduleType_ = other.moduleType_;
      group_ = other.group_;
      tag_ = other.tag_.Clone();
      param_ = other.param_.Clone();
      childModule_ = other.childModule_.Clone();
      paramGroup_ = other.paramGroup_.Clone();
      childGroup_ = other.childGroup_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModuleSpec Clone() {
      return new ModuleSpec(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "moduleType" field.</summary>
    public const int ModuleTypeFieldNumber = 4;
    private string moduleType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModuleType {
      get { return moduleType_; }
      set {
        moduleType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 5;
    private string group_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Group {
      get { return group_; }
      set {
        group_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ParamSpec> _repeated_param_codec
        = pb::FieldCodec.ForMessage(58, global::Tctrl.Schema.ParamSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ParamSpec> param_ = new pbc::RepeatedField<global::Tctrl.Schema.ParamSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ParamSpec> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "childModule" field.</summary>
    public const int ChildModuleFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ModuleSpec> _repeated_childModule_codec
        = pb::FieldCodec.ForMessage(66, global::Tctrl.Schema.ModuleSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec> childModule_ = new pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec> ChildModule {
      get { return childModule_; }
    }

    /// <summary>Field number for the "paramGroup" field.</summary>
    public const int ParamGroupFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.GroupInfo> _repeated_paramGroup_codec
        = pb::FieldCodec.ForMessage(74, global::Tctrl.Schema.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> paramGroup_ = new pbc::RepeatedField<global::Tctrl.Schema.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> ParamGroup {
      get { return paramGroup_; }
    }

    /// <summary>Field number for the "childGroup" field.</summary>
    public const int ChildGroupFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.GroupInfo> _repeated_childGroup_codec
        = pb::FieldCodec.ForMessage(82, global::Tctrl.Schema.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> childGroup_ = new pbc::RepeatedField<global::Tctrl.Schema.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> ChildGroup {
      get { return childGroup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModuleSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModuleSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if (Path != other.Path) return false;
      if (ModuleType != other.ModuleType) return false;
      if (Group != other.Group) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!childModule_.Equals(other.childModule_)) return false;
      if(!paramGroup_.Equals(other.paramGroup_)) return false;
      if(!childGroup_.Equals(other.childGroup_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (ModuleType.Length != 0) hash ^= ModuleType.GetHashCode();
      if (Group.Length != 0) hash ^= Group.GetHashCode();
      hash ^= tag_.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= childModule_.GetHashCode();
      hash ^= paramGroup_.GetHashCode();
      hash ^= childGroup_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (ModuleType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModuleType);
      }
      if (Group.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Group);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      param_.WriteTo(output, _repeated_param_codec);
      childModule_.WriteTo(output, _repeated_childModule_codec);
      paramGroup_.WriteTo(output, _repeated_paramGroup_codec);
      childGroup_.WriteTo(output, _repeated_childGroup_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (ModuleType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModuleType);
      }
      if (Group.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Group);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      size += param_.CalculateSize(_repeated_param_codec);
      size += childModule_.CalculateSize(_repeated_childModule_codec);
      size += paramGroup_.CalculateSize(_repeated_paramGroup_codec);
      size += childGroup_.CalculateSize(_repeated_childGroup_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModuleSpec other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.ModuleType.Length != 0) {
        ModuleType = other.ModuleType;
      }
      if (other.Group.Length != 0) {
        Group = other.Group;
      }
      tag_.Add(other.tag_);
      param_.Add(other.param_);
      childModule_.Add(other.childModule_);
      paramGroup_.Add(other.paramGroup_);
      childGroup_.Add(other.childGroup_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            ModuleType = input.ReadString();
            break;
          }
          case 42: {
            Group = input.ReadString();
            break;
          }
          case 50: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 58: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 66: {
            childModule_.AddEntriesFrom(input, _repeated_childModule_codec);
            break;
          }
          case 74: {
            paramGroup_.AddEntriesFrom(input, _repeated_paramGroup_codec);
            break;
          }
          case 82: {
            childGroup_.AddEntriesFrom(input, _repeated_childGroup_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionInfo : pb::IMessage<ConnectionInfo> {
    private static readonly pb::MessageParser<ConnectionInfo> _parser = new pb::MessageParser<ConnectionInfo>(() => new ConnectionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo(ConnectionInfo other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      type_ = other.type_;
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionInfo Clone() {
      return new ConnectionInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if (Type != other.Type) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupInfo : pb::IMessage<GroupInfo> {
    private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo(GroupInfo other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      tag_ = other.tag_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo Clone() {
      return new GroupInfo(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if(!tag_.Equals(other.tag_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= tag_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      tag_.Add(other.tag_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppSpec : pb::IMessage<AppSpec> {
    private static readonly pb::MessageParser<AppSpec> _parser = new pb::MessageParser<AppSpec>(() => new AppSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tctrl.Schema.TctrlSchemaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppSpec(AppSpec other) : this() {
      key_ = other.key_;
      label_ = other.label_;
      tag_ = other.tag_.Clone();
      description_ = other.description_;
      path_ = other.path_;
      childModule_ = other.childModule_.Clone();
      childGroup_ = other.childGroup_.Clone();
      optionList_ = other.optionList_.Clone();
      connection_ = other.connection_.Clone();
      moduleType_ = other.moduleType_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppSpec Clone() {
      return new AppSpec(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 2;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 10;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "childModule" field.</summary>
    public const int ChildModuleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ModuleSpec> _repeated_childModule_codec
        = pb::FieldCodec.ForMessage(42, global::Tctrl.Schema.ModuleSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec> childModule_ = new pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ModuleSpec> ChildModule {
      get { return childModule_; }
    }

    /// <summary>Field number for the "childGroup" field.</summary>
    public const int ChildGroupFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.GroupInfo> _repeated_childGroup_codec
        = pb::FieldCodec.ForMessage(50, global::Tctrl.Schema.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> childGroup_ = new pbc::RepeatedField<global::Tctrl.Schema.GroupInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.GroupInfo> ChildGroup {
      get { return childGroup_; }
    }

    /// <summary>Field number for the "optionList" field.</summary>
    public const int OptionListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.OptionList> _repeated_optionList_codec
        = pb::FieldCodec.ForMessage(58, global::Tctrl.Schema.OptionList.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.OptionList> optionList_ = new pbc::RepeatedField<global::Tctrl.Schema.OptionList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.OptionList> OptionList {
      get { return optionList_; }
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ConnectionInfo> _repeated_connection_codec
        = pb::FieldCodec.ForMessage(66, global::Tctrl.Schema.ConnectionInfo.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ConnectionInfo> connection_ = new pbc::RepeatedField<global::Tctrl.Schema.ConnectionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ConnectionInfo> Connection {
      get { return connection_; }
    }

    /// <summary>Field number for the "moduleType" field.</summary>
    public const int ModuleTypeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Tctrl.Schema.ModuleTypeSpec> _repeated_moduleType_codec
        = pb::FieldCodec.ForMessage(74, global::Tctrl.Schema.ModuleTypeSpec.Parser);
    private readonly pbc::RepeatedField<global::Tctrl.Schema.ModuleTypeSpec> moduleType_ = new pbc::RepeatedField<global::Tctrl.Schema.ModuleTypeSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tctrl.Schema.ModuleTypeSpec> ModuleType {
      get { return moduleType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Label != other.Label) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if (Description != other.Description) return false;
      if (Path != other.Path) return false;
      if(!childModule_.Equals(other.childModule_)) return false;
      if(!childGroup_.Equals(other.childGroup_)) return false;
      if(!optionList_.Equals(other.optionList_)) return false;
      if(!connection_.Equals(other.connection_)) return false;
      if(!moduleType_.Equals(other.moduleType_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      hash ^= tag_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      hash ^= childModule_.GetHashCode();
      hash ^= childGroup_.GetHashCode();
      hash ^= optionList_.GetHashCode();
      hash ^= connection_.GetHashCode();
      hash ^= moduleType_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Label);
      }
      tag_.WriteTo(output, _repeated_tag_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      childModule_.WriteTo(output, _repeated_childModule_codec);
      childGroup_.WriteTo(output, _repeated_childGroup_codec);
      optionList_.WriteTo(output, _repeated_optionList_codec);
      connection_.WriteTo(output, _repeated_connection_codec);
      moduleType_.WriteTo(output, _repeated_moduleType_codec);
      if (Path.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      size += tag_.CalculateSize(_repeated_tag_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      size += childModule_.CalculateSize(_repeated_childModule_codec);
      size += childGroup_.CalculateSize(_repeated_childGroup_codec);
      size += optionList_.CalculateSize(_repeated_optionList_codec);
      size += connection_.CalculateSize(_repeated_connection_codec);
      size += moduleType_.CalculateSize(_repeated_moduleType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppSpec other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      tag_.Add(other.tag_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      childModule_.Add(other.childModule_);
      childGroup_.Add(other.childGroup_);
      optionList_.Add(other.optionList_);
      connection_.Add(other.connection_);
      moduleType_.Add(other.moduleType_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Label = input.ReadString();
            break;
          }
          case 26: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            childModule_.AddEntriesFrom(input, _repeated_childModule_codec);
            break;
          }
          case 50: {
            childGroup_.AddEntriesFrom(input, _repeated_childGroup_codec);
            break;
          }
          case 58: {
            optionList_.AddEntriesFrom(input, _repeated_optionList_codec);
            break;
          }
          case 66: {
            connection_.AddEntriesFrom(input, _repeated_connection_codec);
            break;
          }
          case 74: {
            moduleType_.AddEntriesFrom(input, _repeated_moduleType_codec);
            break;
          }
          case 82: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
